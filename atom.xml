<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Wes Koerber</title>
    <link rel="self" type="application/atom+xml" href="https://www.weskoerber.com/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://www.weskoerber.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-04-25T00:00:00+00:00</updated>
    <id>https://www.weskoerber.com/atom.xml</id>
    <entry xml:lang="en">
        <title>Writing better CLI applications</title>
        <published>2025-04-25T00:00:00+00:00</published>
        <updated>2025-04-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Wes Koerber
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.weskoerber.com/posts/blog/stdout-formatting-options/"/>
        <id>https://www.weskoerber.com/posts/blog/stdout-formatting-options/</id>
        
        <content type="html" xml:base="https://www.weskoerber.com/posts/blog/stdout-formatting-options/">&lt;p&gt;As programmers, we interact with command line utilities on a daily basis. These
days there are so many libraries for creating great utilities from TUIs to
simple argument parsers. It also helps that the POSIX and GNU standards for
command line arguments is damn near ubiquitous - hell, &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;standard&#x2F;commandline&#x2F;syntax&quot;&gt;even Microsoft adopted
them&lt;&#x2F;a&gt;
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. However, I find that command line utilities are lacking in some areas. In
this post, I&#x27;ll explore some areas I think need improvement, and suggest some
alternatives.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pipelines&quot;&gt;Pipelines&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pipeline_(Unix)&quot;&gt;Pipelines&lt;&#x2F;a&gt; are used heavily in
Unix-like operating systems, and is often what makes it stand out. Instead of
creating large, clunky, and complicated applications that try to implement every
feature the authors can think of, the philosophy of Unix is to implement the
most basic functionality, and use other programs to perform some further
operations.&lt;&#x2F;p&gt;
&lt;p&gt;When running command line applications, the output of the application is
typically formatted in a way that makes it easily readable by humans. This
usually takes the form of a table, grid, or list. This is great for us humans,
as it&#x27;s easy for our brains to read and interpret at a quick glance. But that&#x27;s
not easiest for a machine to parse &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Sure, there&#x27;s many great utilities like
&lt;code&gt;awk&lt;&#x2F;code&gt;, &lt;code&gt;sed&lt;&#x2F;code&gt;, and &lt;code&gt;grep&lt;&#x2F;code&gt;, but I think there&#x27;s a better way.&lt;&#x2F;p&gt;
&lt;p&gt;When a command-line application runs, it could detect whether its &lt;code&gt;stdout&lt;&#x2F;code&gt; is a
terminal device or some other handle. For example, &lt;code&gt;stdout&lt;&#x2F;code&gt; could be connected
to &lt;code&gt;stdin&lt;&#x2F;code&gt; of another program, in which case it would be a pipe. Applications
could detect this and determine the output format to use.&lt;&#x2F;p&gt;
&lt;p&gt;Every application has its own way of outputting data. Look at the &lt;code&gt;lsblk&lt;&#x2F;code&gt; and
&lt;code&gt;ls&lt;&#x2F;code&gt; commands. They&#x27;re both tabular data, but you would need to implement
parsing logic twice - once for each command. If you have to run many commands,
having individual parsing logic for each becomes time-consuming and clutters the
actual purpose of your application. Instead, applications should be able to
output data in a format that other utilities can accept easily that minimizes
the effort required to extract data.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if the application&#x27;s &lt;code&gt;stdout&lt;&#x2F;code&gt; is a terminal, it could output its
results in a tabular format. But when &lt;code&gt;stdout&lt;&#x2F;code&gt; is a pipe, maybe it could output
its results in some sort of structured text format, such as JSON. This would
enable the use of &lt;code&gt;jq&lt;&#x2F;code&gt; to parse the output easily. Or maybe you can send the
JSON data to some other environment. Since most languages have libraries that
can parse JSON, integration is trivial.&lt;&#x2F;p&gt;
&lt;p&gt;There should still be options for overriding this behavior though, since one
use-case could be piping results to a pager to view and navigate a high volume
of output more easily. In this case, since the application&#x27;s &lt;code&gt;stdout&lt;&#x2F;code&gt; is a pipe
connected to the pager&#x27;s &lt;code&gt;stdin&lt;&#x2F;code&gt;, the application would output JSON, but we want
the tabular format. Here we could explicitly tell the application we want the
tabular output style with an option, such as &lt;code&gt;--output-style=tabular&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-client-server-model&quot;&gt;The client -&amp;gt; server model&lt;&#x2F;h1&gt;
&lt;p&gt;In the world of Unix-like operating systems, a pattern you&#x27;ll see implemented
often for applications is to have a daemon process which implements the
application&#x27;s business logic and listens for input via IPC (socket, pipe, shared
memory, etc), and a small command-line utility that talks to the daemon process
over this IPC channel. There are many utilities that use this pattern:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;makoctl -&amp;gt; mako (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emersion&#x2F;mako&quot;&gt;repo&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;nmcli -&amp;gt; NetworkManager (&lt;a href=&quot;https:&#x2F;&#x2F;gitlab.freedesktop.org&#x2F;NetworkManager&#x2F;NetworkManager&quot;&gt;repo&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;swaymsg -&amp;gt; sway (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swaywm&#x2F;sway&quot;&gt;repo&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;wpctl -&amp;gt; wireplumber (&lt;a href=&quot;https:&#x2F;&#x2F;gitlab.freedesktop.org&#x2F;pipewire&#x2F;wireplumber&#x2F;&quot;&gt;repo&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Most of systemd, such as:
&lt;ul&gt;
&lt;li&gt;journalctl -&amp;gt; systemd-journald&lt;&#x2F;li&gt;
&lt;li&gt;loginctl -&amp;gt; systemd-logind&lt;&#x2F;li&gt;
&lt;li&gt;networkctl -&amp;gt; systemd-networkd&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I think this pattern works really well, because it separates the actual logic of
the application and the user interface. It also works really well cross-platform
too, particularly on Windows, since services are a special type of application
that is non-interactive. It also simplifies environments where you may have
multiple users. You only need one daemon process, but you are able to have many
client processes talking to the daemon over the IPC channel. Several other
aspects of the application are easier to control and manages, such as access
control, daemon lifetime management, logging, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, this is just not the right pattern for some applications. For
example, the &lt;code&gt;ls&lt;&#x2F;code&gt; command doesn&#x27;t need to be this complex. A much more
appropriate invocation strategy is the one-shot method (the way it&#x27;s currently
implemented), where the application launches, it processes its input, does some
stuff, then exits.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;exit-codes-and-error-messages&quot;&gt;Exit codes and error messages&lt;&#x2F;h1&gt;
&lt;p&gt;Most of the time, when applications quit due to an error, the error code is 1.
However, there may be many reasons for an application to terminate unexpectedly.
How is a user supposed to differentiate between different conditions not being
met, errors with input, etc? For example, if a program terminates because a file
doesn&#x27;t exist, how can the user of the application differentiate that between
termination due to an invalid option? In my opinion, each error code should
correspond to a particular condition. I really don&#x27;t like the idea of &quot;unknown&quot;
or &quot;generic&quot; errors. Most of the time, these errors are not &quot;unknown&quot; or
&quot;generic&quot;, the author is just too lazy to specifically identify them. Error
messages typically take the burden of identifying specific errors by emitting a
message to &lt;code&gt;stderr&lt;&#x2F;code&gt;. This isn&#x27;t easy for applications to parse, since the error
messages are often formatted with some input from the user.&lt;&#x2F;p&gt;
&lt;p&gt;Error messages in another area that can be improved. Applications such as code
compilers have pretty good error messages. The messages are good enough that
they often tell you the exact source of the problematic line, and sometimes even
the problematic character (such as a missing semi-colon). Rust is the gold
standard for compiler errors. We should take a page out of its book and apply it
to our command line applications.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;man-pages&quot;&gt;Man pages&lt;&#x2F;h1&gt;
&lt;p&gt;This one is subjective, but I &lt;em&gt;love&lt;&#x2F;em&gt; man pages. Finding help in a man page is so
much quicker than googling, and you don&#x27;t have to search several links to find
what you need. Just &lt;code&gt;man my_application&lt;&#x2F;code&gt; and you have everything you need to
know. Applications commonly give you man pages for the usage and purpose of the
application. I really like when applications provide man pages for configuration
files (e.g. &lt;code&gt;man 5 gitignore&lt;&#x2F;code&gt;). I think more applications should do this.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Just to be clear, POSIX doesn&#x27;t strictly define long options (i.e.
&lt;code&gt;--option=value&lt;&#x2F;code&gt;, &lt;code&gt;--option value&lt;&#x2F;code&gt;, or &lt;code&gt;--option&lt;&#x2F;code&gt;), but long options are not
inherently incompatible with POSIX-compliant systems.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;What I mean here really is that it&#x27;s not the easiest to write utilities
that parse the output. Optimal machine parsing would be binary data, not
text streams.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Questions About Organizational Culture</title>
        <published>2025-04-25T00:00:00+00:00</published>
        <updated>2025-04-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Wes Koerber
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.weskoerber.com/posts/blogroll/organizational-culture/"/>
        <id>https://www.weskoerber.com/posts/blogroll/organizational-culture/</id>
        
        <content type="html" xml:base="https://www.weskoerber.com/posts/blogroll/organizational-culture/"></content>
        
    </entry>
    <entry xml:lang="en">
        <title>!! in Vim</title>
        <published>2025-04-12T00:00:00+00:00</published>
        <updated>2025-04-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Wes Koerber
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.weskoerber.com/posts/til/vim-bang-bang/"/>
        <id>https://www.weskoerber.com/posts/til/vim-bang-bang/</id>
        
        <content type="html" xml:base="https://www.weskoerber.com/posts/til/vim-bang-bang/">&lt;h1 id=&quot;tl-dr&quot;&gt;TL;DR&lt;&#x2F;h1&gt;
&lt;p&gt;Today I learned about VIM&#x27;s &lt;code&gt;!!&lt;&#x2F;code&gt; command, and it&#x27;s amazing! It works by sending
the selected range to an external program&#x27;s &lt;code&gt;stdin&lt;&#x2F;code&gt;, and replaces those lines
with its &lt;code&gt;stdout&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;using-an-empty-range&quot;&gt;Using an empty range&lt;&#x2F;h1&gt;
&lt;p&gt;Sometimes you may want to put the contents of a file directly into you buffer,
but you don&#x27;t want to open up the file in a separate buffer, yank the contents,
and put them in your desired buffer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;readme.txt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;This is a readme file.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;I need this file in a buffer!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;my_buffer&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;This is my buffer. I want the contents of the `readme.txt` file to go in this
&lt;&#x2F;span&gt;&lt;span&gt;file!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After switching to normal mode and navigating to the empty line (the last line
in &lt;code&gt;my_buffer&lt;&#x2F;code&gt;), typing &lt;code&gt;!!cat readme.txt&lt;&#x2F;code&gt; will but the contents of
&lt;code&gt;readme.txt&lt;&#x2F;code&gt; into my buffer, starting at my cursor!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;my_buffer&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;This is my buffer. I want the contents of the `readme.txt` file to go in this
&lt;&#x2F;span&gt;&lt;span&gt;file!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;This is a readme file.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;I need this file in a buffer!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;replacing-a-single-line&quot;&gt;Replacing a single line&lt;&#x2F;h1&gt;
&lt;p&gt;Sometimes you want to view the content of a command&#x27;s &lt;code&gt;stdout&lt;&#x2F;code&gt; in Vim. Usually
what I do is run the command and pipe &lt;code&gt;stdout&lt;&#x2F;code&gt; into Vim&#x27;s &lt;code&gt;stdin&lt;&#x2F;code&gt; (i.e. &lt;code&gt;vim -&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example using the &lt;code&gt;!!&lt;&#x2F;code&gt; command. Say you have a JSON file that&#x27;s been
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Minification_(programming)&quot;&gt;minified&lt;&#x2F;a&gt; and you
want to un-minify it. To accomplish this, we can use
&lt;a href=&quot;https:&#x2F;&#x2F;jqlang.org&#x2F;&quot;&gt;&lt;code&gt;jq&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to read the file and put it&#x27;s formatted JSON output
into our buffer.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;age&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;address&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;street&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;123 Fake St&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;city&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Nowhere&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;zip&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;98765&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;hobbies&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;coding&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;gaming&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;nothing&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;],&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;active&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;scores&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;math&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;95&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;science&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;88&lt;&#x2F;span&gt;&lt;span&gt;},&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;lastLogin&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2023-10-05T14:30:00Z&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After switching to Vim&#x27;s normal mode and putting my cursor over the line with
the minified JSON, when I type &lt;code&gt;!!jq&amp;lt;CR&amp;gt;&lt;&#x2F;code&gt;, the single line of minified JSON is
replaced with multiple lines of perfectly-formatted JSON -- magic!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;id&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;age&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;address&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;street&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;123 Fake St&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;city&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Nowhere&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;zip&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;98765&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;hobbies&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;coding&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;gaming&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;nothing&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;active&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;scores&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;math&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;95&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;science&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;88
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;lastLogin&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2023-10-05T14:30:00Z&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;replacing-a-range&quot;&gt;Replacing a range&lt;&#x2F;h1&gt;
&lt;p&gt;Here&#x27;s another contrived example. You have a list of strings and you need to
sort them and edit them in a buffer. Let&#x27;s ignore that Vim has a built-in sort
command (&lt;code&gt;:h sort&lt;&#x2F;code&gt;), so we need to use &lt;code&gt;sort&lt;&#x2F;code&gt; from GNU coreutils. One way you
might accomplish this task is:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;save the list of strings to a file&lt;&#x2F;li&gt;
&lt;li&gt;run GNU &lt;code&gt;sort&lt;&#x2F;code&gt; on the file, saving the output to a separate file&lt;&#x2F;li&gt;
&lt;li&gt;open the sorted file in Vim&lt;&#x2F;li&gt;
&lt;li&gt;yank the sorted lines&lt;&#x2F;li&gt;
&lt;li&gt;put the sorted lines into the desired location in your destination buffer&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This is a pretty lengthy task. Maybe we can shorten it. How about we:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;save the list of strings to a file&lt;&#x2F;li&gt;
&lt;li&gt;run GNU &lt;code&gt;sort&lt;&#x2F;code&gt; on the file, piping the output to Vim&#x27;s &lt;code&gt;stdin&lt;&#x2F;code&gt; (&lt;code&gt;vim -&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;yank the sorted lines&lt;&#x2F;li&gt;
&lt;li&gt;put the sorted lines into the desired location in your destination buffer&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;That&#x27;s better- we got rid of the intermediate file containing our sorted
strings, but it&#x27;s still a bit lengthy.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s probably some other ways you can accomplish this process a bit quicker,
but instead of going over every possible scenario, let&#x27;s see how you&#x27;d do this
with the &lt;code&gt;!!&lt;&#x2F;code&gt; command:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;using the range of strings, run &lt;code&gt;!!sort&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Yep, that&#x27;s it. One step. Let&#x27;s have a closer look.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;Here are some notes. I need these to keep organized!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TO-DO List:
&lt;&#x2F;span&gt;&lt;span&gt;- fix the leaky faucet
&lt;&#x2F;span&gt;&lt;span&gt;- walk the dog
&lt;&#x2F;span&gt;&lt;span&gt;- take out the trash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Grocery List:
&lt;&#x2F;span&gt;&lt;span&gt;- milk
&lt;&#x2F;span&gt;&lt;span&gt;- ground beef
&lt;&#x2F;span&gt;&lt;span&gt;- butter
&lt;&#x2F;span&gt;&lt;span&gt;- eggs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s say I want to sort my grocery list- I think it&#x27;ll be easier to take
inventory of what I need if it&#x27;s in alphabetical order. I&#x27;ll position my cursor
on the &quot;butter&quot; line in my grocery list and -- in normal mode -- type
&lt;code&gt;4!!sort&amp;lt;CR&amp;gt;&lt;&#x2F;code&gt;. &lt;em&gt;Et voilà&lt;&#x2F;em&gt; -- my grocery list is now sorted:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;Here are some notes. I need these to keep organized!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;TO-DO List:
&lt;&#x2F;span&gt;&lt;span&gt;- fix the leaky faucet
&lt;&#x2F;span&gt;&lt;span&gt;- walk the dog
&lt;&#x2F;span&gt;&lt;span&gt;- take out the trash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Grocery List:
&lt;&#x2F;span&gt;&lt;span&gt;- butter
&lt;&#x2F;span&gt;&lt;span&gt;- eggs
&lt;&#x2F;span&gt;&lt;span&gt;- ground beef
&lt;&#x2F;span&gt;&lt;span&gt;- milk
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Why I&#x27;m disabling editor autocomplete</title>
        <published>2024-12-22T00:00:00+00:00</published>
        <updated>2024-12-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Wes Koerber
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.weskoerber.com/posts/blog/disabling-autocomplete/"/>
        <id>https://www.weskoerber.com/posts/blog/disabling-autocomplete/</id>
        
        <content type="html" xml:base="https://www.weskoerber.com/posts/blog/disabling-autocomplete/">&lt;p&gt;I&#x27;ve been using Neovim as my text editor for over 2 years now, and I use it for
&lt;em&gt;everything&lt;&#x2F;em&gt;: a Personalized Development Environment
(&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=QMVIJhC9Veg&quot;&gt;PDE&lt;&#x2F;a&gt;); a note-taking tool using
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nvim-neorg&#x2F;neorg&quot;&gt;Neorg&lt;&#x2F;a&gt;; a log reader that handles opening,
searching, and writing very large files like a breeze; a man page reader; and so
much more.&lt;&#x2F;p&gt;
&lt;p&gt;One of the mainstays in my plugin arsenal is
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hrsh7th&#x2F;nvim-cmp&quot;&gt;&lt;code&gt;nvim-cmp&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which provides
&lt;em&gt;intellisense-style&lt;&#x2F;em&gt; autocompletion. Its collection of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hrsh7th&#x2F;nvim-cmp&#x2F;wiki&#x2F;List-of-sources&quot;&gt;completion
sources&lt;&#x2F;a&gt; allows
extending its functionality into many domains quite easily. It&#x27;s a very useful
plugin and it worked very well for me, &lt;em&gt;and it was one of the main reasons I
switched to (and stuck with) Neovim&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, as time went on, I found myself using &lt;code&gt;nvim-cmp&lt;&#x2F;code&gt; &lt;em&gt;less&lt;&#x2F;em&gt; for its
intended purpose and &lt;em&gt;more&lt;&#x2F;em&gt; for use cases that are better solved with other
plugins and workflows. I found that in trying to &lt;em&gt;shoehorn&lt;&#x2F;em&gt; &lt;code&gt;nvim-cmp&lt;&#x2F;code&gt; into
several different tools, my overall productivity &lt;em&gt;diminished&lt;&#x2F;em&gt;. In this post,
I&#x27;ll explain why I&#x27;m disabling &lt;code&gt;nvim-cmp&lt;&#x2F;code&gt; (maybe), what I&#x27;ll use in its place,
and how doing so will be of benefit in the long run.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;how-i-use-nvim-cmp&quot;&gt;How I use &lt;code&gt;nvim-cmp&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I realized that my main use of &lt;code&gt;nvim-cmp&lt;&#x2F;code&gt; was for API discovery, &lt;em&gt;especially in
languages with namespaces&lt;&#x2F;em&gt; (e.g. &lt;code&gt;C++&lt;&#x2F;code&gt;, &lt;code&gt;C#&lt;&#x2F;code&gt;, &lt;code&gt;Zig&lt;&#x2F;code&gt;). I often found myself begin
typing a line by resolving further into the namespace and paging through the
list of symbols to see if it had what I wanted. If it did, then I would accept
the suggestion and move forward; if it didn&#x27;t, I would &quot;back out&quot; or &quot;go up&quot; a
level in the namespace heirarchy, and try again. Using Zig as an example:
&lt;code&gt;std.fs.&amp;lt;...&amp;gt;&lt;&#x2F;code&gt;, &lt;code&gt;std.fs.Dir.&amp;lt;...&amp;gt;&lt;&#x2F;code&gt;, &lt;code&gt;std.fs.path.&amp;lt;...&amp;gt;&lt;&#x2F;code&gt;... and so on, until I
found what I was looking for. Once I found it, I could continue with the next
&quot;token&quot; in my &quot;stream&quot; of conciousness.&lt;&#x2F;p&gt;
&lt;p&gt;However, if I knew &lt;em&gt;exactly&lt;&#x2F;em&gt; what symbol I wanted and &lt;em&gt;exactly&lt;&#x2F;em&gt; where to find
it, I didn&#x27;t really use &lt;code&gt;nvim-cmp&lt;&#x2F;code&gt;. For example, using &lt;code&gt;std.debug.print&lt;&#x2F;code&gt; in Zig
or &lt;code&gt;std::cout&lt;&#x2F;code&gt; in C++ (or &lt;code&gt;printf&lt;&#x2F;code&gt;, even), I &lt;em&gt;rarely&lt;&#x2F;em&gt; relied on &lt;code&gt;nvim-cmp&lt;&#x2F;code&gt; for
completions. I found that it was &lt;em&gt;quicker&lt;&#x2F;em&gt; for me (and less disruptive) to just
type the symbol, &lt;em&gt;letter-by-letter&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I am not the fastest typer, either. If I had to guess, I would say I type at
around 70-80 words per minute for English prose (such as this blog post,
emails--&quot;normal&quot; communication with other humans). That number is lower when
writing code. It&#x27;s difficult to equate the two, since English prose is measured
in words per minute, whereas writing code is measured in symbols per minute
(probably.. I don&#x27;t know, just a guess), which for me is probably anywhere from
20-40 percent slower &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Whatever the case may be, it feels &lt;em&gt;a lot&lt;&#x2F;em&gt; faster to just type the exact symbol
I need instead of using &lt;code&gt;nvim-cmp&lt;&#x2F;code&gt; to help. Crucially, it feels &lt;em&gt;even faster&lt;&#x2F;em&gt; to
type the following symbol because my train of thought hasn&#x27;t been &lt;em&gt;interrupted&lt;&#x2F;em&gt;.
For example, typing &lt;code&gt;std.deb&amp;lt;C-y&amp;gt;.pri&amp;lt;C-y&amp;gt;&lt;&#x2F;code&gt; feels slower than typing
&lt;code&gt;std.debug.print&lt;&#x2F;code&gt; (&lt;code&gt;&amp;lt;C-y&amp;gt;&lt;&#x2F;code&gt; is my completion-accept key).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.weskoerber.com&#x2F;posts&#x2F;blog&#x2F;disabling-autocomplete&#x2F;zig-print-autocomplete.png&quot; alt=&quot;Zig std.debug.print autocomplete&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-will-i-use-instead&quot;&gt;What will I use instead?&lt;&#x2F;h1&gt;
&lt;p&gt;Of course, I still have a desire for API discoverability and documentation from
within Neovim. If &lt;code&gt;nvim-cmp&lt;&#x2F;code&gt; no longer provides this, &lt;em&gt;I&#x27;ll need some
alternatives&lt;&#x2F;em&gt;. Recently, I&#x27;ve been giving
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nvim-telescope&#x2F;telescope.nvim&quot;&gt;Telescope&lt;&#x2F;a&gt; a heavier
workload, particularly leveraging  its
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nvim-treesitter&#x2F;nvim-treesitter&quot;&gt;Treesitter&lt;&#x2F;a&gt; integration&lt;&#x2F;p&gt;
&lt;h2 id=&quot;telescope&quot;&gt;Telescope&lt;&#x2F;h2&gt;
&lt;p&gt;Telescope can show all symbols in a buffer or a workspace. These symbols can be
filtered through them using the familiar Telescope interface, add them to the
quickfix list, show a preview of the selection, and so on. This method for API
discoverability is &lt;em&gt;much more powerful&lt;&#x2F;em&gt;. Most of the time, the documentation
&lt;code&gt;nvim-cmp&lt;&#x2F;code&gt; shows comes from the LSP, which in turn gets it from doc-comments in
the source code &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Using Telescope&#x27;s preview, or even putting the result in
the quickfix list and opening the source in a new buffer allows a much better
experience to read source code and comments within it.&lt;&#x2F;p&gt;
&lt;p&gt;This leads us to my next point: &lt;em&gt;reading the source code&lt;&#x2F;em&gt; is often the best way
to get &lt;em&gt;accurate&lt;&#x2F;em&gt; and &lt;em&gt;up-to-date&lt;&#x2F;em&gt; documentation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.weskoerber.com&#x2F;posts&#x2F;blog&#x2F;disabling-autocomplete&#x2F;telescope-buffer-symbols.png&quot; alt=&quot;Telescope buffer symbols&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;source-code&quot;&gt;Source code&lt;&#x2F;h2&gt;
&lt;p&gt;If your language or library provides source code and you&#x27;re not reading it,
&lt;em&gt;you&#x27;re doing yourself a disservice&lt;&#x2F;em&gt;. It&#x27;s often the best way to figure out what
a particular API does. More often than not, documentation in the form of
comments is &lt;em&gt;outdated&lt;&#x2F;em&gt;, and could lead you down a rabbit hole. Documentation
that&#x27;s hosted on the web is worse, even if it is autogenerated from comments in
the code. Often times the code is updated, but the author forgets to update the
doc-comment (hi, it&#x27;s me, I&#x27;m author). This is avoidable if you just &lt;em&gt;read the
code&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;This is not always an option, though. For example, the C standard library that&#x27;s
installed on your distribution only provides &lt;em&gt;header files&lt;&#x2F;em&gt;, not
&lt;em&gt;implementations&lt;&#x2F;em&gt; (unless you clone the library, of course). And for languages
like C#, you actually need to &lt;em&gt;decompile&lt;&#x2F;em&gt; the runtime to get source code--wild.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;grep&quot;&gt;Grep&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Do not underestimate the power of grep&lt;&#x2F;em&gt;. In languages like C, it can be
difficult to navigate through header files, especially if they&#x27;re nested and
inter-dependent. This is where grep makes it easy. If you&#x27;re looking for a
particular symbol, or some verbiage you think may lead you to the symbol, and
you&#x27;re not sure which header file it&#x27;s in, you can pull one of these:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;$ grep -ire &amp;#39;IFF_NOARP&amp;#39; &#x2F;usr&#x2F;include
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;usr&#x2F;include&#x2F;linux&#x2F;if.h: * @IFF_NOARP: no ARP protocol. Can be toggled through sysfs. Volatile.
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;usr&#x2F;include&#x2F;linux&#x2F;if.h:	IFF_NOARP			= 1&amp;lt;&amp;lt;7,  &#x2F;* sysfs *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;usr&#x2F;include&#x2F;linux&#x2F;if.h:#define IFF_NOARP			IFF_NOARP
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;usr&#x2F;include&#x2F;net&#x2F;if.h:    IFF_NOARP = 0x80,		&#x2F;* No address resolution protocol.  *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;usr&#x2F;include&#x2F;net&#x2F;if.h:# define IFF_NOARP	IFF_NOARP
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;automatic-includes&quot;&gt;Automatic includes&lt;&#x2F;h2&gt;
&lt;p&gt;Supported language servers an also automatically include the header or namespace
that contains a symbol you&#x27;re looking for. For example,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clangd&#x2F;clangd&quot;&gt;&lt;code&gt;clangd&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; will automatically include
&lt;code&gt;stdio.h&lt;&#x2F;code&gt; if it sees &lt;code&gt;printf&lt;&#x2F;code&gt; in your file.&lt;&#x2F;p&gt;
&lt;p&gt;All of these workflows is something &lt;code&gt;nvim-cmp&lt;&#x2F;code&gt; cannot provide--it is just not
designed for this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;man-pages&quot;&gt;Man pages&lt;&#x2F;h2&gt;
&lt;p&gt;Telescope also provides support for searching for man pages, and Neovim has
first-class support for rendering man pages. This makes it a breeze to find
&lt;em&gt;detailed&lt;&#x2F;em&gt; documentation on a topic. The information in the man pages is often
dense, but &lt;em&gt;succinct&lt;&#x2F;em&gt;. They may also contain links to relevant pages, which
Neovim can follow by default.&lt;&#x2F;p&gt;
&lt;p&gt;For API discoverability and documentation &lt;em&gt;that&#x27;s available without an internet
connection&lt;&#x2F;em&gt; (or even if you don&#x27;t want to open up a browser), man pages are hard
to beat. I love it when libraries and tools ship with man pages, but sadly, this
seems like a dying practice.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;streamlining-stream-of-conciousness&quot;&gt;Streamlining stream-of-conciousness&lt;&#x2F;h1&gt;
&lt;p&gt;One of the main goals of disabling &lt;code&gt;nvim-cmp&lt;&#x2F;code&gt; is to &lt;em&gt;optimize&lt;&#x2F;em&gt; the way I approch
writing code. Instead of trying to discover an API and read its documentation
&lt;em&gt;in-band&lt;&#x2F;em&gt; with writing code, I want to separate the two. I want to find ways to
reduce the amount of noise and distraction while writing code. I want to know
the API &lt;em&gt;before&lt;&#x2F;em&gt; I use it, not get to know it &lt;em&gt;while&lt;&#x2F;em&gt; I&#x27;m using it.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of breaking my train of thought mid-line, I should be able to plow
through it knowing &lt;em&gt;exactly&lt;&#x2F;em&gt; what I need. How far this goes, I&#x27;m not sure. Just
a single expression? Maybe. A whole line? Possibly. A single scope? That would
be nice. An entire function? Sweet.&lt;&#x2F;p&gt;
&lt;p&gt;I may not end up removing &lt;code&gt;nvim-cmp&lt;&#x2F;code&gt; entirely. There are sill some use-cases
that don&#x27;t conflict with this thesis. For example, path completion is wonderful
and doesn&#x27;t conflict at all with writing code.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m on the fence about snippets. Usually, when you need a snippet, you know
exactly what you&#x27;re getting. The &lt;code&gt;std&lt;&#x2F;code&gt; snippet for Zig converts &lt;code&gt;std&lt;&#x2F;code&gt; to &lt;code&gt;const std = @import(&quot;std&quot;);&lt;&#x2F;code&gt;. It&#x27;s hard to make an argument that this is not a boost
in efficiency.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;&#x2F;h1&gt;
&lt;p&gt;In general, I see much more productivity when I can turn on some music, put my
head down, and go goblin-mode for as long as I can manage before being
interrupted by encountering an obstacle, such as needing to find just the right
function. If I can separate reading documentation from writing code, I should be
able to sustain these bouts for much longer, resulting in more productivity,
better large-scale thought cohesion, and, honestly, a more enjoyable experience.
After all, writing code should be &lt;em&gt;fun&lt;&#x2F;em&gt;, and reading documentation just takes the
fun right out of it.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Lots of ballpark, anectdotal, pulling-it-out-my-you-know-what numbers
here.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;There are some notable exceptions here, such as C#.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Handles Are the Better Pointers</title>
        <published>2024-12-06T00:00:00+00:00</published>
        <updated>2024-12-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Wes Koerber
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.weskoerber.com/posts/blogroll/handles-vs-pointers/"/>
        <id>https://www.weskoerber.com/posts/blogroll/handles-vs-pointers/</id>
        
        <content type="html" xml:base="https://www.weskoerber.com/posts/blogroll/handles-vs-pointers/"></content>
        
    </entry>
    <entry xml:lang="en">
        <title>Windows service programs with Zig</title>
        <published>2024-09-25T00:00:00+00:00</published>
        <updated>2024-09-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Wes Koerber
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.weskoerber.com/posts/blog/zig-windows-service/"/>
        <id>https://www.weskoerber.com/posts/blog/zig-windows-service/</id>
        
        <content type="html" xml:base="https://www.weskoerber.com/posts/blog/zig-windows-service/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h1&gt;
&lt;p&gt;This post will demonstrate a basic &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;services&#x2F;services&quot;&gt;Windows
service&lt;&#x2F;a&gt;
implementation using Zig.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;windows-apis&quot;&gt;Windows APIs&lt;&#x2F;h1&gt;
&lt;p&gt;In order to get access to the Windows APIs, we need to tell our application
about the functions. To do this we can declare &lt;code&gt;extern&lt;&#x2F;code&gt; functions. For example,
the
&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;iphlpapi&#x2F;nf-iphlpapi-getadaptersaddresses&quot;&gt;&lt;code&gt;GetAdaptersAddresses&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
function.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;extern fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;GetAdaptersAddresses&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;anyopaque&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;IP_ADAPTER_ADDRESSES&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).os.windows.WINAPI) u32;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not so bad, right?&lt;&#x2F;p&gt;
&lt;p&gt;Oops I almost forgot:
&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;iptypes&#x2F;ns-iptypes-ip_adapter_addresses_lh&quot;&gt;&lt;code&gt;IP_ADAPTER_ADDRESSES&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
isn&#x27;t defined yet. Let&#x27;s add this real quick... Ok, maybe not - that&#x27;s a lot of
fields and a lot of typing.&lt;&#x2F;p&gt;
&lt;p&gt;Thankfully, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;marler8997&quot;&gt;Jonathan Marler&lt;&#x2F;a&gt; created a binding
generator appropriately named
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;marlersoft&#x2F;zigwin32&quot;&gt;zigwin32&lt;&#x2F;a&gt; that generates Zig bindings
for Win32. We can fetch zigwin32 with Zig&#x27;s built-in package manager and make
it available to our &lt;code&gt;build.zig&lt;&#x2F;code&gt; script.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;zig fetch --save &amp;#39;git+https:&#x2F;&#x2F;github.com&#x2F;marlersoft&#x2F;zigwin32#main&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After adding it to our &lt;code&gt;exe&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;root_module&lt;&#x2F;code&gt;, we can continue.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;main-zig-skeleton&quot;&gt;&lt;code&gt;main.zig&lt;&#x2F;code&gt; Skeleton&lt;&#x2F;h1&gt;
&lt;p&gt;For a starting point, we&#x27;ll create three functions: &lt;code&gt;main&lt;&#x2F;code&gt;, &lt;code&gt;serviceMain&lt;&#x2F;code&gt;, and
&lt;code&gt;serviceControl&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Our &lt;code&gt;main&lt;&#x2F;code&gt; function is our entry point to our application. No surprises here.
The &lt;code&gt;serviceMain&lt;&#x2F;code&gt; and &lt;code&gt;serviceControl&lt;&#x2F;code&gt; functions will be called by the service
control manager. We&#x27;ll get into the details of these functions a bit later, but
take note of their signatures and calling conventions.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;serviceMain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*?&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const u8&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(std.os.windows.WINAPI) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;serviceControl&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event_type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event_data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;anyopaque&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;anyopaque&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(std.os.windows.WINAPI) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; win32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;win32&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;connect-to-the-service-control-manager&quot;&gt;Connect to the service control manager&lt;&#x2F;h1&gt;
&lt;p&gt;Our service program may run several different services within one process. We
can define the services that run within our process as a &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;winsvc&#x2F;ns-winsvc-service_table_entrya&quot;&gt;service
table&lt;&#x2F;a&gt;.
Each entry in this table contains a string holding the service name and a
function pointer that points to the service&#x27;s entry point. In this case, it&#x27;s
our &lt;code&gt;serviceMain&lt;&#x2F;code&gt; function. Let&#x27;s define the service table in our main
function.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; service_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;My Awesome Service&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; service_table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;win32.system.services.SERVICE_TABLE_ENTRYA&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        .{
&lt;&#x2F;span&gt;&lt;span&gt;            .lpServiceName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@constCast&lt;&#x2F;span&gt;&lt;span&gt;(service_name.ptr),
&lt;&#x2F;span&gt;&lt;span&gt;            .lpServiceProc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; serviceMain,
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        .{ .lpServiceName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, .lpServiceProc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After we define the services our process will run, we need to connect our
service program to the service control manager and tell it about our services.
We do this by calling
&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;winsvc&#x2F;nf-winsvc-startservicectrldispatchera&quot;&gt;&lt;code&gt;StartServiceCtrlDispatcherA&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
passing the table we created in the previous step.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip --
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(win32.system.services.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StartServiceCtrlDispatcherA&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;service_table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the call to &lt;code&gt;StartServiceCtrlDispatcherA&lt;&#x2F;code&gt; doesn&#x27;t return until all
services within our service table are stopped, so we can just return after this
call. It is possible this function doesn&#x27;t return for a very long time!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;initialize-the-service&quot;&gt;Initialize the service&lt;&#x2F;h1&gt;
&lt;p&gt;After calling &lt;code&gt;StartServiceCtrlDispatcherA&lt;&#x2F;code&gt; and creating the connection, the
service control manager will call our &lt;code&gt;serviceMain&lt;&#x2F;code&gt; function we registered in
the table earlier.&lt;&#x2F;p&gt;
&lt;p&gt;Once we enter &lt;code&gt;serviceMain&lt;&#x2F;code&gt;, the service control manager needs to send events
to our service. For example, in the services console in Windows, right-clicking
a service displays a menu with some actions: Start, Stop, Pause, Restart, etc.
These are all events that our service needs to handle. But before we handle
anything, we need to tell the service control manager where to send its events.
This is where the &lt;code&gt;serviceControl&lt;&#x2F;code&gt; function comes in.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;passing-data-between-functions&quot;&gt;Passing data between functions&lt;&#x2F;h2&gt;
&lt;p&gt;Since &lt;code&gt;serviceMain&lt;&#x2F;code&gt; doesn&#x27;t directly call &lt;code&gt;serviceControl&lt;&#x2F;code&gt;, we need some way of
sharing data between these two functions. One way is to create global variables
that the two functions can access. However, I really don&#x27;t like global data,
and try avoid it as much as possible.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll note that in the following section I choose to register our
&lt;code&gt;serviceControl&lt;&#x2F;code&gt; function via &lt;code&gt;RegisterServiceCtrlHandlerExA&lt;&#x2F;code&gt; instead of
&lt;code&gt;RegisterServiceCtrlHandlerA&lt;&#x2F;code&gt;. This is intentional. The former allows us to
pass in a pointer that gets forwarded to &lt;code&gt;serviceMain&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s create a simple &lt;code&gt;ServiceData&lt;&#x2F;code&gt; struct that we can provide to the control
registration.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ServiceData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;isize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;-1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;win32.system.services.SERVICE_STATUS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; .{
&lt;&#x2F;span&gt;&lt;span&gt;        .dwServiceType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; win32.system.services.SERVICE_WIN32_OWN_PROCESS,
&lt;&#x2F;span&gt;&lt;span&gt;        .dwCurrentState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .START_PENDING&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .dwControlsAccepted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .dwWin32ExitCode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .dwServiceSpecificExitCode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .dwCheckPoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .dwWaitHint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;stop_event&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;anyopaque &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Don&#x27;t worry too much about these fields for now, we&#x27;ll get to them later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;registering-the-control-handler&quot;&gt;Registering the control handler&lt;&#x2F;h2&gt;
&lt;p&gt;Inside our &lt;code&gt;serviceMain&lt;&#x2F;code&gt; function we&#x27;ll register the &lt;code&gt;serviceControl&lt;&#x2F;code&gt; function
with the service control manager, telling it to call this function when an
event is generated. We do this with the
&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;winsvc&#x2F;nf-winsvc-registerservicectrlhandlerexa&quot;&gt;&lt;code&gt;RegisterServiceCtrlHandlerExA&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
function. We&#x27;ll also pass the address of a default &lt;code&gt;ServiceData&lt;&#x2F;code&gt; struct.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;serviceMain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*?&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const u8&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(std.os.windows.WINAPI) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; service_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ServiceData&lt;&#x2F;span&gt;&lt;span&gt;{};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; status_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; win32.system.services.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RegisterServiceCtrlHandlerExA&lt;&#x2F;span&gt;&lt;span&gt;(service_name.ptr, serviceControl, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;service_data);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(status_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This call returns a handle that we&#x27;ll also need in &lt;code&gt;serviceControl&lt;&#x2F;code&gt;, so let&#x27;s
save the handle to the &lt;code&gt;status_handle&lt;&#x2F;code&gt; variable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thread-synchronization&quot;&gt;Thread synchronization&lt;&#x2F;h2&gt;
&lt;p&gt;I hope I didn&#x27;t scare you too badly with that section title, it&#x27;s not that bad,
I promise.&lt;&#x2F;p&gt;
&lt;p&gt;Our process needs to stay open as long as our services are running. If we
return from &lt;code&gt;serviceMain&lt;&#x2F;code&gt;, our process closes and we lose our services. This is
not what we want. You might be tempted to put a &lt;code&gt;while (true) {}&lt;&#x2F;code&gt; block at the
end of &lt;code&gt;serviceMain&lt;&#x2F;code&gt; but that has its own problems I won&#x27;t get into here.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, we&#x27;ll create a waitable event using with
&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;synchapi&#x2F;nf-synchapi-createeventa&quot;&gt;&lt;code&gt;CreateEventA&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
This function will create a synchronization primitive that we can use as a
signaling mechanism to block the main thread until something happens. For now,
let&#x27;s save this event object to the &lt;code&gt;stop_event&lt;&#x2F;code&gt; variable.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;serviceMain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*?&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const u8&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(std.os.windows.WINAPI) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip --
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; stop_event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; win32.system.threading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreateEventA&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(stop_event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;up-and-running&quot;&gt;Up and running&lt;&#x2F;h2&gt;
&lt;p&gt;We now have everything we need to tell the service control manager we&#x27;re
running and ready to handle events. Let&#x27;s make sure we assign the
&lt;code&gt;status_handle&lt;&#x2F;code&gt; and &lt;code&gt;stop_event&lt;&#x2F;code&gt; we created in the previous steps to our
&lt;code&gt;ServiceData&lt;&#x2F;code&gt; struct.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;serviceMain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*?&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const u8&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(std.os.windows.WINAPI) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip --
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    service_data.handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; status_handle;
&lt;&#x2F;span&gt;&lt;span&gt;    service_data.stop_event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stop_event;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, let&#x27;s set our &lt;code&gt;ServiceData&lt;&#x2F;code&gt; state to running and tell the service control
manager we&#x27;ll handle stop and shutdown commands. We&#x27;ll do this by updating the
&lt;code&gt;dwCurrentState&lt;&#x2F;code&gt; and &lt;code&gt;dwControlsAccepted&lt;&#x2F;code&gt; fields in the  &lt;code&gt;ServiceData.status&lt;&#x2F;code&gt;
we just initialized. Then, we&#x27;ll update the service control manager with this
new data with the
&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;winsvc&#x2F;nf-winsvc-setservicestatus&quot;&gt;&lt;code&gt;SetServiceStatus&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
function.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;serviceMain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*?&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const u8&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(std.os.windows.WINAPI) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip --
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    service_data.status.dwCurrentState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .RUNNING&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    service_data.status.dwControlsAccepted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; win32.system.services.SERVICE_CONTROL_STOP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; win32.system.services.SERVICE_CONTROL_SHUTDOWN;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(win32.system.services.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SetServiceStatus&lt;&#x2F;span&gt;&lt;span&gt;(service_data.handle, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;service_data.status) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we&#x27;ll await a signal from the &lt;code&gt;stop_event&lt;&#x2F;code&gt; we created earlier to block
the process using
&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;synchapi&#x2F;nf-synchapi-waitforsingleobject&quot;&gt;&lt;code&gt;WaitForSingleObject&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
Since this call is blocks until we signal the &lt;code&gt;stop_event&lt;&#x2F;code&gt; object, we can
assume if we get past this our service was stopped and we can update our status
with the service control manager.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;serviceMain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*?&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const u8&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(std.os.windows.WINAPI) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip --
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(win32.system.threading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WaitForSingleObject&lt;&#x2F;span&gt;&lt;span&gt;(service_data.stop_event, win32.system.windows_programming.INFINITE) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    service_data.status.dwCurrentState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .STOPPED&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(win32.system.services.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SetServiceStatus&lt;&#x2F;span&gt;&lt;span&gt;(service_data.handle, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;service_data.status) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;handling-events&quot;&gt;Handling events&lt;&#x2F;h1&gt;
&lt;p&gt;Now that we&#x27;ve initialized our service and are blocking the process waiting for
events, we can get implement the &lt;code&gt;serviceControl&lt;&#x2F;code&gt; function that handles these
events.&lt;&#x2F;p&gt;
&lt;p&gt;We can retrieve our &lt;code&gt;service_data&lt;&#x2F;code&gt; pointer we passed previously by casting it
to our &lt;code&gt;ServiceData&lt;&#x2F;code&gt; type. Also, we&#x27;ll switch on the &lt;code&gt;code&lt;&#x2F;code&gt;, which is the event
sent to us by the service control manager. Our service is pretty dumb, so we
won&#x27;t have a lot of robust handling here. For now, we&#x27;ll just return
&lt;code&gt;NO_ERROR&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;serviceControl&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event_type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event_data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;anyopaque&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;anyopaque&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(std.os.windows.WINAPI) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;service_data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ServiceData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@alignCast&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrCast&lt;&#x2F;span&gt;&lt;span&gt;(context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.?&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;win32.foundation.WIN32_ERROR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;(code) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .NO_ERROR&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@intFromEnum&lt;&#x2F;span&gt;&lt;span&gt;(err);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;winsvc&#x2F;nc-winsvc-lphandler_function_ex&quot;&gt;control handler
documentation&lt;&#x2F;a&gt;
says that we should return &lt;code&gt;ERROR_CALL_NOT_IMPLEMENTED&lt;&#x2F;code&gt; if we don&#x27;t handle an
event, and &lt;code&gt;NO_ERROR&lt;&#x2F;code&gt; for the &lt;code&gt;SERVICE_CONTROL_INTERROGATE&lt;&#x2F;code&gt;, event if we don&#x27;t
handle it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip --
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;win32.foundation.WIN32_ERROR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;(code) {
&lt;&#x2F;span&gt;&lt;span&gt;        win32.system.services.SERVICE_CONTROL_INTERROGATE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .NO_ERROR&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .ERROR_CALL_NOT_IMPLEMENTED&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip --
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we&#x27;ll handle the stop and shutdown events. When we handle these, we&#x27;ll
need to make sure deinitialization happens properly either here in our control
handler or &lt;code&gt;serviceMain&lt;&#x2F;code&gt;. Remember, in the &lt;a href=&quot;https:&#x2F;&#x2F;www.weskoerber.com&#x2F;posts&#x2F;blog&#x2F;zig-windows-service&#x2F;#up-and-running&quot;&gt;Up and running&lt;&#x2F;a&gt;
section we created and awaited our stop event which is blocking our process. If
we never signaled the object, the process would never terminate. In order to
signal the event object, we&#x27;ll use the
&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;synchapi&#x2F;nf-synchapi-setevent&quot;&gt;&lt;code&gt;SetEvent&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
function.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip --
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;win32.foundation.WIN32_ERROR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;(code) {
&lt;&#x2F;span&gt;&lt;span&gt;        win32.system.services.SERVICE_CONTROL_STOP, win32.system.services.SERVICE_CONTROL_SHUTDOWN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;blk&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;            service_data.status.dwCurrentState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .STOP_PENDING&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(win32.system.services.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SetServiceStatus&lt;&#x2F;span&gt;&lt;span&gt;(service_data.handle, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;service_data.status) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(win32.system.threading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SetEvent&lt;&#x2F;span&gt;&lt;span&gt;(service_data.stop_event) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt; :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;blk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .NO_ERROR&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip --
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip --
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;wrap-up&quot;&gt;Wrap up&lt;&#x2F;h1&gt;
&lt;p&gt;I hope this post was helpful in showing how to use Zig to create Windows
services. I just did the bare minimum here, but there&#x27;s so much room for
improvement, starting with refactoring this code to read more like idiomatic
Zig code.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s also nearly impossible to diagnose crashes. Logging would be a great
addition as well.&lt;&#x2F;p&gt;
&lt;p&gt;Although our service can be started, stopped, and restarted, doesn&#x27;t really do
anything. That&#x27;s neither practical nor useful. However, the possibilities are
endless. Here are some examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;File monitoring&lt;&#x2F;li&gt;
&lt;li&gt;Data backup&lt;&#x2F;li&gt;
&lt;li&gt;Content synchronization&lt;&#x2F;li&gt;
&lt;li&gt;Web APIs&lt;&#x2F;li&gt;
&lt;li&gt;Notifications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;full-example&quot;&gt;Full example&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; service_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;My Awesome Service&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; service_table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;win32.system.services.SERVICE_TABLE_ENTRYA&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        .{
&lt;&#x2F;span&gt;&lt;span&gt;            .lpServiceName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@constCast&lt;&#x2F;span&gt;&lt;span&gt;(service_name.ptr),
&lt;&#x2F;span&gt;&lt;span&gt;            .lpServiceProc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; serviceMain,
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        .{ .lpServiceName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, .lpServiceProc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(win32.system.services.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StartServiceCtrlDispatcherA&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;service_table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;serviceMain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*?&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const u8&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(std.os.windows.WINAPI) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; argc;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; argv;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; service_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ServiceData&lt;&#x2F;span&gt;&lt;span&gt;{};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; status_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; win32.system.services.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RegisterServiceCtrlHandlerExA&lt;&#x2F;span&gt;&lt;span&gt;(service_name.ptr, serviceControl, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;service_data);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(status_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; stop_event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; win32.system.threading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreateEventA&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(stop_event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    service_data.handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; status_handle;
&lt;&#x2F;span&gt;&lt;span&gt;    service_data.stop_event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stop_event;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    service_data.status.dwCurrentState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .RUNNING&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    service_data.status.dwControlsAccepted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; win32.system.services.SERVICE_CONTROL_STOP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; win32.system.services.SERVICE_CONTROL_SHUTDOWN;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(win32.system.services.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SetServiceStatus&lt;&#x2F;span&gt;&lt;span&gt;(service_data.handle, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;service_data.status) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(win32.system.threading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WaitForSingleObject&lt;&#x2F;span&gt;&lt;span&gt;(service_data.stop_event, win32.system.windows_programming.INFINITE) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    service_data.status.dwCurrentState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .STOPPED&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(win32.system.services.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SetServiceStatus&lt;&#x2F;span&gt;&lt;span&gt;(service_data.handle, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;service_data.status) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;serviceControl&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event_type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event_data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;anyopaque&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;anyopaque&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(std.os.windows.WINAPI) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; event_type;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; event_data;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;service_data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ServiceData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@alignCast&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrCast&lt;&#x2F;span&gt;&lt;span&gt;(context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.?&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;win32.foundation.WIN32_ERROR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;(code) {
&lt;&#x2F;span&gt;&lt;span&gt;        win32.system.services.SERVICE_CONTROL_STOP, win32.system.services.SERVICE_CONTROL_SHUTDOWN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;blk&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;            service_data.status.dwCurrentState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .STOP_PENDING&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(win32.system.services.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SetServiceStatus&lt;&#x2F;span&gt;&lt;span&gt;(service_data.handle, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;service_data.status) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(win32.system.threading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SetEvent&lt;&#x2F;span&gt;&lt;span&gt;(service_data.stop_event) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; error
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt; :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;blk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .NO_ERROR&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        win32.system.services.SERVICE_CONTROL_INTERROGATE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .NO_ERROR&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .ERROR_CALL_NOT_IMPLEMENTED&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@intFromEnum&lt;&#x2F;span&gt;&lt;span&gt;(err);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; win32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;win32&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ServiceData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;isize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;-1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;win32.system.services.SERVICE_STATUS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; .{
&lt;&#x2F;span&gt;&lt;span&gt;        .dwServiceType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; win32.system.services.SERVICE_WIN32_OWN_PROCESS,
&lt;&#x2F;span&gt;&lt;span&gt;        .dwCurrentState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .START_PENDING&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .dwControlsAccepted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .dwWin32ExitCode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .dwServiceSpecificExitCode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .dwCheckPoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .dwWaitHint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;stop_event&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;anyopaque &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>STM32 &#x27;Hello, world!&#x27; with Zig</title>
        <published>2024-09-23T00:00:00+00:00</published>
        <updated>2024-09-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Wes Koerber
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.weskoerber.com/posts/blog/stm32-zig-1/"/>
        <id>https://www.weskoerber.com/posts/blog/stm32-zig-1/</id>
        
        <content type="html" xml:base="https://www.weskoerber.com/posts/blog/stm32-zig-1/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;ve been using Zig &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;weskoerber?tab=repositories&amp;amp;q=&amp;amp;type=&amp;amp;language=zig&amp;amp;sort=stargazers&quot;&gt;a
lot&lt;&#x2F;a&gt;
over the past few months writing wide variety of projects. From
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;weskoerber&#x2F;kewpie&quot;&gt;kewpie&lt;&#x2F;a&gt;, a simple query string parser,
to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;weskoerber&#x2F;dirtstache&quot;&gt;dirtstache&lt;&#x2F;a&gt;, a
&lt;a href=&quot;https:&#x2F;&#x2F;mustache.github.io&#x2F;&quot;&gt;Mustache&lt;&#x2F;a&gt; implementation -- even a
&lt;a href=&quot;https:&#x2F;&#x2F;curl.se&#x2F;libcurl&#x2F;&quot;&gt;libcurl&lt;&#x2F;a&gt; wrapper with
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;weskoerber&#x2F;zig-curl&quot;&gt;zig-curl&lt;&#x2F;a&gt; -- I have experience with
Zig across a wide range of domains.&lt;&#x2F;p&gt;
&lt;p&gt;However, I&#x27;ve always wanted to use Zig on an embedded target. On paper, Zig is
an excellent choice for embedded programming: no implicit allocations, no
hidden control flow, seamless integration with the C ABI, a fantastic build
system&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, etc. However, that&#x27;s on paper. I wanted to see for myself if the
advertised strengths of Zig held up when put to the test, especially in a
resource-constrained embedded environment.&lt;&#x2F;p&gt;
&lt;p&gt;Well, I did just that. In this post I&#x27;ll retrace my steps in how I went from an
empty &lt;code&gt;main.zig&lt;&#x2F;code&gt; to printing &lt;code&gt;Hello, World!&lt;&#x2F;code&gt; to my terminal.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;goals&quot;&gt;Goals&lt;&#x2F;h1&gt;
&lt;p&gt;Before writing any Zig code, I set some goals for this project in order to
maximize my learning potential:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;No dependencies&lt;&#x2F;li&gt;
&lt;li&gt;100% Zig code&lt;&#x2F;li&gt;
&lt;li&gt;A 3-day time limit&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;what-we-re-working-with&quot;&gt;What we&#x27;re working with&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;&#x2F;h2&gt;
&lt;p&gt;I have a few Cortex-M4 development boards laying around: an
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs-online.com&#x2F;3934&#x2F;A700000006811369.pdf&quot;&gt;MSP432P4&lt;&#x2F;a&gt;
(&lt;a href=&quot;https:&#x2F;&#x2F;e2e.ti.com&#x2F;support&#x2F;microcontrollers&#x2F;arm-based-microcontrollers-group&#x2F;arm-based-microcontrollers&#x2F;f&#x2F;arm-based-microcontrollers-forum&#x2F;1007640&#x2F;msp432p401r-is-the-msp432-line-discontinued&quot;&gt;RIP&lt;&#x2F;a&gt;),
a &lt;a href=&quot;https:&#x2F;&#x2F;www.st.com&#x2F;en&#x2F;evaluation-tools&#x2F;nucleo-f401re.html&quot;&gt;NUCLEO-F4&lt;&#x2F;a&gt;, and a
&lt;a href=&quot;https:&#x2F;&#x2F;www.st.com&#x2F;en&#x2F;evaluation-tools&#x2F;nucleo-l496zg.html&quot;&gt;NUCLEO-L4&lt;&#x2F;a&gt;. For
this experiment, I decided to go with the NUCLEO-F4 for no reason other than it
was sitting closest to me at the time.&lt;&#x2F;p&gt;
&lt;p&gt;The process is quite similar for other Cortex-M4-based MCUs, so feel free to
follow along with your own hardware. The peripherals on your device may vary,
so consult your device&#x27;s reference manual.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;software&quot;&gt;Software&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;flash-programming&quot;&gt;Flash programming&lt;&#x2F;h3&gt;
&lt;p&gt;You&#x27;ll need a way to flash the code to your MCU. I&#x27;m using
&lt;a href=&quot;https:&#x2F;&#x2F;openocd.org&#x2F;&quot;&gt;OpenOCD&lt;&#x2F;a&gt; to flash mine. However, there are several other
utilities out there you may choose from.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;compiler-and-binary-utilities&quot;&gt;Compiler and binary utilities&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;m using Zig master version &lt;code&gt;0.14.0-dev.1632+d83a3f174&lt;&#x2F;code&gt;, installed via
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;weskoerber&#x2F;zvm&quot;&gt;zvm&lt;&#x2F;a&gt;. Note that this version is in
development and has some &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ziglang&#x2F;zig&#x2F;issues?q=is%3Aissue+is%3Aopen+milestone%3A0.14.0+label%3Abreaking&quot;&gt;planned breaking
changes&lt;&#x2F;a&gt;,
so this may not work in the future.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to the Zig compiler (and its suite of binary utilities), the &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;binutils&#x2F;&quot;&gt;GNU
binutils&lt;&#x2F;a&gt; will help us out immensely if
things go wrong. Notably, Zig doesn&#x27;t ship with
&lt;a href=&quot;https:&#x2F;&#x2F;sourceware.org&#x2F;binutils&#x2F;docs-2.39&#x2F;binutils&#x2F;nm.html&quot;&gt;&lt;code&gt;nm&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; or
&lt;a href=&quot;https:&#x2F;&#x2F;sourceware.org&#x2F;binutils&#x2F;docs-2.39&#x2F;binutils&#x2F;objdump.html&quot;&gt;&lt;code&gt;objdump&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
utilities. I strongly recommend installing the &lt;a href=&quot;https:&#x2F;&#x2F;developer.arm.com&#x2F;Tools%20and%20Software&#x2F;GNU%20Toolchain&quot;&gt;GCC toolchain for
ARM&lt;&#x2F;a&gt; before
continuing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;literature&quot;&gt;Literature&lt;&#x2F;h2&gt;
&lt;p&gt;You&#x27;ll absolutely need the documentation on your MCU, unless you&#x27;re some
superhuman that&#x27;s memorized everything. At the very least, you&#x27;ll need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MCU reference manual&lt;&#x2F;li&gt;
&lt;li&gt;Cortex-M4 reference manual&lt;&#x2F;li&gt;
&lt;li&gt;Device-specific datasheet&lt;&#x2F;li&gt;
&lt;li&gt;Development board user manual&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;getting-started&quot;&gt;Getting started&lt;&#x2F;h1&gt;
&lt;p&gt;I was excited. I finally sat down and was ready to make some LEDs blink. I
created my project and an empty &lt;code&gt;build.zig&lt;&#x2F;code&gt; and &lt;code&gt;main.zig&lt;&#x2F;code&gt; with an empty while
loop:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;std.Build&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;main.zig&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;asm volatile &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;nop&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prevents optimizing the loop away
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;build-my-thing&quot;&gt;Build my thing&lt;&#x2F;h1&gt;
&lt;p&gt;The first logical step here was to get &lt;em&gt;something&lt;&#x2F;em&gt; to build. Since we know
we&#x27;re only going to run this code on a Cortex-M4 MCU, we can hard-code the
target field using
&lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;std&#x2F;#std.Build.resolveTargetQuery&quot;&gt;&lt;code&gt;b.resolveTargetQuery&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
instead of using the usual
&lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;std&#x2F;#std.Build.standardTargetOptions&quot;&gt;&lt;code&gt;b.standardTargetOptions&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;std.Build&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; exe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;addExecutable&lt;&#x2F;span&gt;&lt;span&gt;(.{
&lt;&#x2F;span&gt;&lt;span&gt;        .name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;stm32-test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .root_source_file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;src&#x2F;main.zig&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        .optimize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;standardOptimizeOption&lt;&#x2F;span&gt;&lt;span&gt;(.{}),
&lt;&#x2F;span&gt;&lt;span&gt;        .target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;resolveTargetQuery&lt;&#x2F;span&gt;&lt;span&gt;(.{
&lt;&#x2F;span&gt;&lt;span&gt;            .cpu_arch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .thumb&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            .cpu_model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; .{ .explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;std.Target.arm.cpu.cortex_m4 },
&lt;&#x2F;span&gt;&lt;span&gt;            .os_tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .freestanding&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            .abi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .eabihf&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }),
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; install_exe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;addInstallArtifact&lt;&#x2F;span&gt;&lt;span&gt;(exe, .{});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;getInstallStep&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;dependOn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;install_exe.step);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After running &lt;code&gt;zig build&lt;&#x2F;code&gt;, &lt;code&gt;stm32-test&lt;&#x2F;code&gt; was put in &lt;code&gt;zig-out&#x2F;bin&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;❯ file zig-out&#x2F;bin&#x2F;stm32-test
&lt;&#x2F;span&gt;&lt;span&gt;zig-out&#x2F;bin&#x2F;stm32-test: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), statically linked, with debug_info, not stripped
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Theoretically, we could flash this to the MCU right now, but it wouldn&#x27;t work.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;convert-elf-to-binary&quot;&gt;Convert ELF to binary&lt;&#x2F;h1&gt;
&lt;p&gt;I said that flashing the &lt;code&gt;ELF&lt;&#x2F;code&gt; file we created in the previous step won&#x27;t work.
Let&#x27;s dive into why it won&#x27;t work.&lt;&#x2F;p&gt;
&lt;p&gt;The Cortex-M4 doesn&#x27;t know about the &lt;code&gt;ELF&lt;&#x2F;code&gt; file format. It loads
programs in a very specific way, and just executes instructions sequentially.
In my case, the STM32F4 has a few different boot modes but we&#x27;ll stick with the
default -- booting from main flash memory. The reference manual says this about
booting:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;[T]he CPU fetches the top-of-stack value from address 0x0000 0000, then
starts code execution from the boot memory starting from 0x0000 0004.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We won&#x27;t get too deep into the startup process here. It&#x27;s covered in &lt;a href=&quot;https:&#x2F;&#x2F;www.weskoerber.com&#x2F;posts&#x2F;blog&#x2F;stm32-zig-1&#x2F;#cortex-m4-startup&quot;&gt;Cortex M4
startup&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The first 4 bytes of the &lt;code&gt;ELF&lt;&#x2F;code&gt; file header are &lt;code&gt;7f 45 4c 46&lt;&#x2F;code&gt;. If we flashed
this to the MCU, it would fetch this value and set it to the stack pointer,
then start executing spurious instructions. Who knows what would happen in this
case. At best, an invalid instruction execution causes an interrupt that resets
the MCU. Additionally, the &lt;code&gt;ELF&lt;&#x2F;code&gt; file contains other non-binary data, such as
debug sympols, section tables, etc. We don&#x27;t want the MCU interpreting these
data as instructions, so we&#x27;ll need to convert to a different format.&lt;&#x2F;p&gt;
&lt;p&gt;This is where &lt;code&gt;objcopy&lt;&#x2F;code&gt; comes into play. We&#x27;ll convert our &lt;code&gt;ELF&lt;&#x2F;code&gt; file into a
&lt;code&gt;BIN&lt;&#x2F;code&gt; file. &lt;code&gt;objcopy&lt;&#x2F;code&gt;&#x27;s man page says this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;objcopy can be used to generate a raw binary file by using an output target
of ‘binary’ (e.g., use -O binary). When objcopy generates a raw binary file,
it will essentially produce a memory dump of the contents of the input object
file. All symbols and relocation information will be discarded. The memory
dump will start at the load address of the lowest section copied into the
output file.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is what we want -- raw instructions and data to flash onto the MCU. Zig
ships with an implementation of &lt;code&gt;objcopy&lt;&#x2F;code&gt;. Let&#x27;s update our &lt;code&gt;build.zig&lt;&#x2F;code&gt; file to
convert the &lt;code&gt;ELF&lt;&#x2F;code&gt; file into a binary file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;std.Build&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; exe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;addExecutable&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; bin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; exe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;addObjCopy&lt;&#x2F;span&gt;&lt;span&gt;(.{ .format &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt; .bin &lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; install_exe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;addInstallArtifact&lt;&#x2F;span&gt;&lt;span&gt;(exe, .{});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; install_bin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;addInstallBinFile&lt;&#x2F;span&gt;&lt;span&gt;(bin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;getOutput&lt;&#x2F;span&gt;&lt;span&gt;(), bin.basename);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;getInstallStep&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;dependOn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;install_bin.step);
&lt;&#x2F;span&gt;&lt;span&gt;    install_bin.step.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;dependOn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;install_exe.step);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After re-running &lt;code&gt;zig build&lt;&#x2F;code&gt;, we now get &lt;code&gt;stm32-test.bin&lt;&#x2F;code&gt; alongside
&lt;code&gt;stm32-test&lt;&#x2F;code&gt; in &lt;code&gt;zig-out&#x2F;bin&lt;&#x2F;code&gt;. Sweet!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;memory-map-and-linking&quot;&gt;Memory map and linking&lt;&#x2F;h1&gt;
&lt;p&gt;We can avoid this topic no longer. We must now talk about linking and the
memory map.&lt;&#x2F;p&gt;
&lt;p&gt;Embedded devices typically have small amounts of flash and SRAM. My STM32F401RE
has 512K of flash and 92K of SRAM. In addition to flash and data memory, the
Cortex-M4 has memory-mapped peripherals. Even though the &lt;em&gt;amount&lt;&#x2F;em&gt; flash and
data memory is small, the &lt;em&gt;address space&lt;&#x2F;em&gt; is quite large with 4G of addressable
memory.&lt;&#x2F;p&gt;
&lt;p&gt;First, lets take a look at how the linker put our &lt;code&gt;ELF&lt;&#x2F;code&gt; together:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;❯ arm-none-eabi-objdump -h zig-out&#x2F;bin&#x2F;stm32-test
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;zig-out&#x2F;bin&#x2F;stm32-test:     file format elf32-littlearm
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Sections:
&lt;&#x2F;span&gt;&lt;span&gt;Idx Name          Size      VMA       LMA       File off  Algn
&lt;&#x2F;span&gt;&lt;span&gt;  0 .ARM.exidx    00000a50  000100f4  000100f4  000000f4  2**2
&lt;&#x2F;span&gt;&lt;span&gt;                  CONTENTS, ALLOC, LOAD, READONLY, DATA
&lt;&#x2F;span&gt;&lt;span&gt;  1 .rodata       00001db8  00010b48  00010b48  00000b48  2**3
&lt;&#x2F;span&gt;&lt;span&gt;                  CONTENTS, ALLOC, LOAD, READONLY, DATA
&lt;&#x2F;span&gt;&lt;span&gt;  2 .ARM.extab    00000b7c  00012900  00012900  00002900  2**2
&lt;&#x2F;span&gt;&lt;span&gt;                  CONTENTS, ALLOC, LOAD, READONLY, DATA
&lt;&#x2F;span&gt;&lt;span&gt;  3 .text         0001f604  0002347c  0002347c  0000347c  2**2
&lt;&#x2F;span&gt;&lt;span&gt;                  CONTENTS, ALLOC, LOAD, READONLY, CODE
&lt;&#x2F;span&gt;&lt;span&gt;  4 .data         00000004  00052a80  00052a80  00022a80  2**2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; -- snip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note two key headings in the output of &lt;code&gt;objdump&lt;&#x2F;code&gt;: VMA and LMA. GNU&#x27;s ld has a
great description of VMA and LMA, so I&#x27;ll let them do the talking:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every loadable or allocatable output section has two addresses. The first is
the VMA, or virtual memory address. This is the address the section will have
when the output file is run. The second is the LMA, or load memory address.
This is the address at which the section will be loaded. In most cases the
two addresses will be the same. An example of when they might be different is
when a data section is loaded into ROM, and then copied into RAM when the
program starts up (this technique is often used to initialize global
variables in a ROM based system). In this case the ROM address would be the
LMA, and the RAM address would be the VMA.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In other words, LMA is the physical address in the MCU&#x27;s memory, whereas VMA is
the address within the MCU&#x27;s memory map.&lt;&#x2F;p&gt;
&lt;p&gt;We need to tell the linker how to lay out each section of our &lt;code&gt;ELF&lt;&#x2F;code&gt; file so
that we can flash it to the target and ensure it executes the instructions we
want it to. In order to do this, we&#x27;ll need a custom linker script.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;linker-script&quot;&gt;Linker script&lt;&#x2F;h2&gt;
&lt;p&gt;There are so many good resources out there regarding linker scripts. I will
only briefly explain the parts of the linker script as it relates to the
Cortext-M4. If you want more in-depth information on linker scripts, refer to
the references below.&lt;&#x2F;p&gt;
&lt;p&gt;Before we get started, let&#x27;s tell Zig to use this linker script:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;std.Build&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; exe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;addExecutable&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    exe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setLinkerScript&lt;&#x2F;span&gt;&lt;span&gt;(b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;stm32f401re.ld&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;memory-regions&quot;&gt;Memory Regions&lt;&#x2F;h3&gt;
&lt;p&gt;We need to tell our linker about the memory layout of our target. We do so
using the
&lt;a href=&quot;https:&#x2F;&#x2F;ftp.gnu.org&#x2F;old-gnu&#x2F;Manuals&#x2F;ld-2.9.1&#x2F;html_node&#x2F;ld_16.html&quot;&gt;&lt;code&gt;MEMORY&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
keyword:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ld&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-ld &quot;&gt;&lt;code class=&quot;language-ld&quot; data-lang=&quot;ld&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FLASH_SIZE&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x80000&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* 512k flash *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SRAM_SIZE&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x17000&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* 92k sram *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;STACK_SIZE&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x800&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* 2k stack *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;MEMORY
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;flash&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rx&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ORIGIN&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x08000000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;LENGTH&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FLASH_SIZE
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sram&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rwx&lt;&#x2F;span&gt;&lt;span&gt;) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ORIGIN&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x20000000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;LENGTH&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SRAM_SIZE
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, we define our flash as a 512K region of read-only memory beginning at
address &lt;code&gt;0x0800_0000&lt;&#x2F;code&gt; and our sram as a 92K region of read-write memory
beginning at address &lt;code&gt;0x2000_0000&lt;&#x2F;code&gt;. We&#x27;ll use the &lt;code&gt;STACK_SIZE&lt;&#x2F;code&gt; variable later.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;entry-point&quot;&gt;Entry point&lt;&#x2F;h3&gt;
&lt;p&gt;The linker needs an entry point. Let&#x27;s define our entry point as the first vector in our vector table, &lt;code&gt;resetHandler&lt;&#x2F;code&gt; (see &lt;a href=&quot;https:&#x2F;&#x2F;www.weskoerber.com&#x2F;posts&#x2F;blog&#x2F;stm32-zig-1&#x2F;#vector-table&quot;&gt;vector table&lt;&#x2F;a&gt; below):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ld&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-ld &quot;&gt;&lt;code class=&quot;language-ld&quot; data-lang=&quot;ld&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ENTRY&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;resetHandler&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;sections&quot;&gt;Sections&lt;&#x2F;h3&gt;
&lt;p&gt;Next we define the layout of our output file with the
&lt;a href=&quot;https:&#x2F;&#x2F;ftp.gnu.org&#x2F;old-gnu&#x2F;Manuals&#x2F;ld-2.9.1&#x2F;html_node&#x2F;ld_18.html#SEC18&quot;&gt;&lt;code&gt;SECTIONS&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
keyword:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ld&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-ld &quot;&gt;&lt;code class=&quot;language-ld&quot; data-lang=&quot;ld&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;SECTIONS
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;text-section&quot;&gt;&lt;code&gt;.text&lt;&#x2F;code&gt; section&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;ld&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-ld &quot;&gt;&lt;code class=&quot;language-ld&quot; data-lang=&quot;ld&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;SECTIONS
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* snip *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.text&lt;&#x2F;span&gt;&lt;span&gt; :
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ALIGN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;LONG&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;__initial_stack_pointer&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;KEEP&lt;&#x2F;span&gt;&lt;span&gt;(*(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.vectors&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        *(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.text&lt;&#x2F;span&gt;&lt;span&gt;*)
&lt;&#x2F;span&gt;&lt;span&gt;        *(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.rodata&lt;&#x2F;span&gt;&lt;span&gt;*)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ALIGN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    } &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;flash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* snip *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Quite a lot is happening here. Let&#x27;s break it down line-by-line:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;align the &lt;code&gt;.text&lt;&#x2F;code&gt; section on a 4-byte boundary&lt;&#x2F;li&gt;
&lt;li&gt;reserve 4-bytes at the start of the &lt;code&gt;.text&lt;&#x2F;code&gt; section for the initial stack pointer&lt;&#x2F;li&gt;
&lt;li&gt;place the vector table immediatly after our initial stack pointer&lt;&#x2F;li&gt;
&lt;li&gt;place the code following the reset vectors&lt;&#x2F;li&gt;
&lt;li&gt;place read-only data after the code&lt;&#x2F;li&gt;
&lt;li&gt;align the end of the &lt;code&gt;.text&lt;&#x2F;code&gt; section on a 4-byte boundary&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;stack-section&quot;&gt;&lt;code&gt;.stack&lt;&#x2F;code&gt; section&lt;&#x2F;h4&gt;
&lt;p&gt;Next comes the stack section. We&#x27;ll reserve spack for our stack using the
&lt;code&gt;STACK_SIZE&lt;&#x2F;code&gt; variable we created earlier. Note that the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ARM-software&#x2F;abi-aa&#x2F;blob&#x2F;main&#x2F;aapcs32&#x2F;aapcs32.rst&quot;&gt;ARM Procedure Call
Standard
(AAPCS)&lt;&#x2F;a&gt;
says that the stack must be double word (8-byte) aligned, not single word
(4-byte).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ld&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-ld &quot;&gt;&lt;code class=&quot;language-ld&quot; data-lang=&quot;ld&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;SECTIONS
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* snip *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.stack&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NOLOAD&lt;&#x2F;span&gt;&lt;span&gt;) :
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ALIGN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;STACK_SIZE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ALIGN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;__initial_stack_pointer&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sram
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* snip *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;align the bottom of the stack on an 8-byte boundary&lt;&#x2F;li&gt;
&lt;li&gt;reserve space for stack defined by &lt;code&gt;STACK_SIZE&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;align the top of the stack on an 8-byte boundary&lt;&#x2F;li&gt;
&lt;li&gt;set the &lt;code&gt;__initial_stack_pointer&lt;&#x2F;code&gt; to the current position&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;data-section&quot;&gt;&lt;code&gt;.data&lt;&#x2F;code&gt; section&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;ld&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-ld &quot;&gt;&lt;code class=&quot;language-ld&quot; data-lang=&quot;ld&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;SECTIONS
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* snip *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.data&lt;&#x2F;span&gt;&lt;span&gt; :
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_sdata&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ALIGN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        *(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.data&lt;&#x2F;span&gt;&lt;span&gt;*)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ALIGN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_edata&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sram &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;AT&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;flash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ldata&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LOADADDR&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.data&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* snip *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;align the &lt;code&gt;.data&lt;&#x2F;code&gt; section on a 4-byte boundary&lt;&#x2F;li&gt;
&lt;li&gt;define a symbol &lt;code&gt;_sdata&lt;&#x2F;code&gt; that marks the start of the &lt;code&gt;.data&lt;&#x2F;code&gt; section&lt;&#x2F;li&gt;
&lt;li&gt;place initialized data in the output file&lt;&#x2F;li&gt;
&lt;li&gt;define a symbol &lt;code&gt;_edata&lt;&#x2F;code&gt; that marks the end of the &lt;code&gt;.data&lt;&#x2F;code&gt; section&lt;&#x2F;li&gt;
&lt;li&gt;align the &lt;code&gt;.data&lt;&#x2F;code&gt; section on a 4-byte boundary&lt;&#x2F;li&gt;
&lt;li&gt;define a symbol &lt;code&gt;_ldata&lt;&#x2F;code&gt; that holds the LMA of our &lt;code&gt;.data&lt;&#x2F;code&gt; section&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note the last part &lt;code&gt;&amp;gt; sram AT&amp;gt; flash&lt;&#x2F;code&gt;. This tells the linker that we want to
put the data in the &lt;code&gt;sram&lt;&#x2F;code&gt; region of memory, but we&#x27;re going to load it from
the &lt;code&gt;flash&lt;&#x2F;code&gt; region. This is important for understanding &lt;a href=&quot;https:&#x2F;&#x2F;www.weskoerber.com&#x2F;posts&#x2F;blog&#x2F;stm32-zig-1&#x2F;#before-main&quot;&gt;what happens before
&lt;code&gt;main()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bss-section&quot;&gt;&lt;code&gt;.bss&lt;&#x2F;code&gt; section&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;ld&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-ld &quot;&gt;&lt;code class=&quot;language-ld&quot; data-lang=&quot;ld&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;SECTIONS
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* snip *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.bss&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NOLOAD&lt;&#x2F;span&gt;&lt;span&gt;) :
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_szero&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ALIGN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        *(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.bss&lt;&#x2F;span&gt;&lt;span&gt;*)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ALIGN&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ezero&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sram
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;* snip *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;align the &lt;code&gt;.bss&lt;&#x2F;code&gt; section on a 4-byte boundary&lt;&#x2F;li&gt;
&lt;li&gt;define a symbol &lt;code&gt;_szero&lt;&#x2F;code&gt; that marks the start of the &lt;code&gt;.bss&lt;&#x2F;code&gt; section&lt;&#x2F;li&gt;
&lt;li&gt;place initialized data in the output file&lt;&#x2F;li&gt;
&lt;li&gt;define a symbol &lt;code&gt;_ezero&lt;&#x2F;code&gt; that marks the end of the &lt;code&gt;.bss&lt;&#x2F;code&gt; section&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;.bss&lt;&#x2F;code&gt; section on a 4-byte boundary&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;References: &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;vector-table&quot;&gt;The vector table&lt;&#x2F;h1&gt;
&lt;p&gt;In the previous section, we put the vector table (&lt;code&gt;.vectors&lt;&#x2F;code&gt;) at the start of
the &lt;code&gt;.text&lt;&#x2F;code&gt; section preceded only by the 4-byte initial stack pointer. Let&#x27;s
define our vector table in Zig:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;resetHandler&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;nmiHandler&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;hardFaultHandler&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;memManageHandler&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;busFaultHandler&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;usageFaultHandler&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;svCallHandler&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;debugMonitorHandler&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;pendSvHandler&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;sysTickHandler&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export const&lt;&#x2F;span&gt;&lt;span&gt; vectors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;linksection&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;.vectors&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const fn &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    resetHandler,
&lt;&#x2F;span&gt;&lt;span&gt;    nmiHandler,
&lt;&#x2F;span&gt;&lt;span&gt;    hardFaultHandler,
&lt;&#x2F;span&gt;&lt;span&gt;    memManageHandler,
&lt;&#x2F;span&gt;&lt;span&gt;    busFaultHandler,
&lt;&#x2F;span&gt;&lt;span&gt;    usageFaultHandler,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; reserved
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; reserved
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; reserved
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; reserved
&lt;&#x2F;span&gt;&lt;span&gt;    svCallHandler,
&lt;&#x2F;span&gt;&lt;span&gt;    debugMonitorHandler,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; reserved
&lt;&#x2F;span&gt;&lt;span&gt;    pendSvHandler,
&lt;&#x2F;span&gt;&lt;span&gt;    sysTickHandler,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip: continued for MCU-specific interrupts; consult datasheet
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, we create our vector table, which is an array of function pointers having
the signature:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const fn &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) void
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each index in the array corresponds to an interrupt vector. The elements
containing &lt;code&gt;null&lt;&#x2F;code&gt; values are reserved. The first 15 bytes of this table will be
identical across all Cortex-M4 MCUs. After that, each MCU will have its own
order for device-specific interrupts.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;linksection(&quot;.vectors&quot;)&lt;&#x2F;code&gt; tells the linker that we want to put this
declaration in the &lt;code&gt;.vectors&lt;&#x2F;code&gt; section of the file. This is analogous to
&lt;code&gt;__attribute__((section(&quot;.vectors&quot;)))&lt;&#x2F;code&gt; in GCC.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;cortex-m4-startup&quot;&gt;Cortex-M4 startup&lt;&#x2F;h1&gt;
&lt;p&gt;Now that we told the linker where to put our code, let&#x27;s talk about why we put
it there. Recall the quote from the datasheet in the &lt;a href=&quot;https:&#x2F;&#x2F;www.weskoerber.com&#x2F;posts&#x2F;blog&#x2F;stm32-zig-1&#x2F;#convert-elf-to-binary&quot;&gt;Convert ELF to
binary&lt;&#x2F;a&gt; section:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;[T]he CPU fetches the top-of-stack value from address 0x0000 0000, then
starts code execution from the boot memory starting from 0x0000 0004.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;When the MCU boots up, the first thing it does is fetch the value at address
&lt;code&gt;0x0000_0000&lt;&#x2F;code&gt; and uses it as its stack pointer. There are a couple of
interesting things to note here. First, the address &lt;code&gt;0x0000_0000&lt;&#x2F;code&gt; is aliased to
&lt;code&gt;0x0800_0000&lt;&#x2F;code&gt; (see footnote &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; for more info). This means that our
&lt;code&gt;__initial_stack_pointer&lt;&#x2F;code&gt; we put at &lt;code&gt;0x0800_0000&lt;&#x2F;code&gt; is accessible also from
&lt;code&gt;0x0000_0000&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After our stack pointer is loaded, the MCU proceeds to &lt;code&gt;0x0000_0004&lt;&#x2F;code&gt; and starts
executing instructions.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a closer look at our output file. First, let&#x27;s check out the section table:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;❯ arm-none-eabi-objdump -h zig-out&#x2F;bin&#x2F;stm32-test
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;zig-out&#x2F;bin&#x2F;stm32-test:     file format elf32-littlearm
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Sections:
&lt;&#x2F;span&gt;&lt;span&gt;Idx Name          Size      VMA       LMA       File off  Algn
&lt;&#x2F;span&gt;&lt;span&gt;  0 .text         0000000c  08000000  08000000  00010000  2**2
&lt;&#x2F;span&gt;&lt;span&gt;                  CONTENTS, ALLOC, LOAD, READONLY, CODE
&lt;&#x2F;span&gt;&lt;span&gt;  1 .ARM.exidx    00000010  0800000c  0800000c  0001000c  2**2
&lt;&#x2F;span&gt;&lt;span&gt;                  CONTENTS, ALLOC, LOAD, READONLY, DATA
&lt;&#x2F;span&gt;&lt;span&gt;  2 .stack        00000800  20000000  20000000  00020000  2**0
&lt;&#x2F;span&gt;&lt;span&gt;                  ALLOC, READONLY
&lt;&#x2F;span&gt;&lt;span&gt;  3 .data         00000000  20000800  20000000  00020000  2**0
&lt;&#x2F;span&gt;&lt;span&gt;                  CONTENTS, ALLOC, LOAD, READONLY, DATA
&lt;&#x2F;span&gt;&lt;span&gt;  4 .bss          00000000  20000800  20000800  00020000  2**0
&lt;&#x2F;span&gt;&lt;span&gt;                  ALLOC
&lt;&#x2F;span&gt;&lt;span&gt;  5 .ARM.attributes 0000003f  00000000  00000000  00020000  2**0
&lt;&#x2F;span&gt;&lt;span&gt;                  CONTENTS, READONLY
&lt;&#x2F;span&gt;&lt;span&gt;  6 .comment      00000067  00000000  00000000  0002003f  2**0
&lt;&#x2F;span&gt;&lt;span&gt;                  CONTENTS, READONLY
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, we see:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.text&lt;&#x2F;code&gt; section starting at &lt;code&gt;0x0800_0000&lt;&#x2F;code&gt; corresponding with the start of the &lt;code&gt;flash&lt;&#x2F;code&gt; region&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.stack&lt;&#x2F;code&gt; section starting at &lt;code&gt;0x2000_0000&lt;&#x2F;code&gt; corresponding with the start of the &lt;code&gt;sram&lt;&#x2F;code&gt; region and having a length of &lt;code&gt;0x800&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.data&lt;&#x2F;code&gt; section starting immediately after our &lt;code&gt;.stack&lt;&#x2F;code&gt; section&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.bss&lt;&#x2F;code&gt; section starting immediately after our &lt;code&gt;.data&lt;&#x2F;code&gt; section&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;❯ arm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;eabi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;objdump &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;j .text zig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&#x2F;bin&#x2F;stm32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;| head &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;20
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;zig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&#x2F;bin&#x2F;stm32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:     file form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;elf32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;littlearm
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Disassembly of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;section &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;.text:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;08000000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;vectors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;20000800        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;andcs   r0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;r0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;r0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;lsl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;16
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;08000004 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;vectors&amp;gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000004&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;08000059 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;0800005d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;08000061 08000065     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Y...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;...a...e...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000014&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;08000069 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;0800006d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;00000000 00000000     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;i...m...........
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;        ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; 800002c:       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;08000071 08000075 00000000 08000079     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;q...u.......y...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; 800003c:       0800007d                                }...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, we see the value &lt;code&gt;20000800&lt;&#x2F;code&gt;, which corresponds to the top of our stack.
This is the &lt;code&gt;__initial_stack_pointer&lt;&#x2F;code&gt; we reserved in the &lt;code&gt;.text&lt;&#x2F;code&gt; section and
defined in the &lt;code&gt;.stack&lt;&#x2F;code&gt; section of our linker script. The following few
addresses are our interrupt vectors that were placed in the &lt;code&gt;.text&lt;&#x2F;code&gt; section.
How cool is that!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;before-main&quot;&gt;What happens before &lt;code&gt;main()&lt;&#x2F;code&gt;?&lt;&#x2F;h1&gt;
&lt;p&gt;When we compile an application on our PCs, we might assume that the entry point
for the application is the &lt;code&gt;main()&lt;&#x2F;code&gt; function. If you assumed that, you&#x27;re half
right. The &lt;code&gt;main&lt;&#x2F;code&gt; function is the entry point &lt;em&gt;your&lt;&#x2F;em&gt; application, but that&#x27;s
not what the operating system calls. The operating system calls the &lt;code&gt;_start()&lt;&#x2F;code&gt;
function, which is usually provided by your libc.&lt;&#x2F;p&gt;
&lt;p&gt;When you build a C&#x2F;C++ application for Linux, your system&#x27;s libc implementation
is implicitly linked to your application, which includes a piece of code called
the &quot;startup code&quot;. The startup code does things like initilize &lt;code&gt;argc&lt;&#x2F;code&gt; and
&lt;code&gt;argv&lt;&#x2F;code&gt;, call constructors, and so on. I won&#x27;t get into too much detail here.
Instead, check out the references below for some deep-dives.&lt;&#x2F;p&gt;
&lt;p&gt;Even though we set our &lt;a href=&quot;https:&#x2F;&#x2F;www.weskoerber.com&#x2F;posts&#x2F;blog&#x2F;stm32-zig-1&#x2F;#entry-point&quot;&gt;entry point&lt;&#x2F;a&gt; above, we&#x27;ll still need to
define our &lt;code&gt;_start()&lt;&#x2F;code&gt; symbol, otherwise the linker complains at us. Let&#x27;s add the following to our &lt;code&gt;main.zig&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;_start&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;asm volatile &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;nop&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We implement an exported &lt;code&gt;_start()&lt;&#x2F;code&gt; function that just calls &lt;code&gt;main()&lt;&#x2F;code&gt;. If main
returns (which it shouldn&#x27;t), we&#x27;ll just hang in an infinite loop.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s what code got generated:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;08000040 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;_start&amp;gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000040&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       b580            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;push    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;{r7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;lr}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000042&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       466f            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;r7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, sp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000044&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       f000 f804       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bl      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000050 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;main.main&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000048&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       e7ff            b.n     800004a &amp;lt;_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0xa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; 800004a:       bf00            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;nop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; 800004c:       e7fd            b.n     800004a &amp;lt;_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0xa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; 800004e:       bf00            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;nop
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;08000050 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;main.main&amp;gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000050&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       e7ff            b.n     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000052 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;main.main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000052&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       bf00            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;nop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000054&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       e7fd            b.n     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000052 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;main.main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000056&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       bf00            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;nop
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;08000058 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;resetHandler&amp;gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000058&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4770            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bx      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;lr
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; 800005a:       bf00            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;nop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Awesome, we made it to &lt;code&gt;main()&lt;&#x2F;code&gt;! You&#x27;d expect this to work once flashed to the
MCU, right? Well, you&#x27;re in for disappointment. Review the Cortex-M4 startup
process: we fetch the stack pointer and begin executing instructions at
&lt;code&gt;0x0000_0004&lt;&#x2F;code&gt;, which is our reset handler. However, our reset handler doesn&#x27;t
do anything, so main will never be called.&lt;&#x2F;p&gt;
&lt;p&gt;In order to fix this, &lt;code&gt;resetHandler()&lt;&#x2F;code&gt; needs to call &lt;code&gt;_start()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;resetHandler&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;callconv&lt;&#x2F;span&gt;&lt;span&gt;(.C) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_start&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That gives us the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;08000040 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;_start&amp;gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000040&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       b580            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;push    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;{r7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;lr}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000042&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       466f            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;r7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, sp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000044&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       f000 f804       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bl      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000050 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;main.main&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000048&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       e7ff            b.n     800004a &amp;lt;_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0xa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; 800004a:       bf00            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;nop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; 800004c:       e7fd            b.n     800004a &amp;lt;_start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0xa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; 800004e:       bf00            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;nop
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;08000050 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;main.main&amp;gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000050&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       e7ff            b.n     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000052 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;main.main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000052&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       bf00            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;nop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000054&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       e7fd            b.n     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000052 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;main.main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000056&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       bf00            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;nop
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;08000058 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;resetHandler&amp;gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000058&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       b580            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;push    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;{r7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;lr}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; 800005a:       466f            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;r7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, sp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; 800005c:       f7ff fff0       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bl      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000040 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;&amp;lt;_start&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000060&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       bd80            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pop     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;{r7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;pc}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8000062&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;:       bf00            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;nop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can see that &lt;code&gt;resetHandler()&lt;&#x2F;code&gt; calls &lt;code&gt;_start()&lt;&#x2F;code&gt;, which calls &lt;code&gt;main()&lt;&#x2F;code&gt;.
Are we there yet? Technically, yes - but we still have work to do. If you&#x27;re
working entirely on the stack and don&#x27;t rely on preinitialized memory, you can
get started, and even make an LED blink.&lt;&#x2F;p&gt;
&lt;p&gt;However, in most cases, you&#x27;ll want to load up your memory from the &lt;code&gt;.data&lt;&#x2F;code&gt; and
&lt;code&gt;.bss&lt;&#x2F;code&gt; sections -- this is not done for you automatically like it is when you
run a program on your computer. Embedded startup code must explicitly perform
this step.&lt;&#x2F;p&gt;
&lt;p&gt;To do this, we&#x27;ll need to refer back to the symbols we created in the linker script:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_sdata&lt;&#x2F;code&gt;: the start of the &lt;code&gt;.data&lt;&#x2F;code&gt; section&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;_edata&lt;&#x2F;code&gt;: the end of the &lt;code&gt;.data&lt;&#x2F;code&gt; section&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;_ldata&lt;&#x2F;code&gt;: the LMA of the &lt;code&gt;.data&lt;&#x2F;code&gt; section&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;_szero&lt;&#x2F;code&gt;: the start of the &lt;code&gt;.bss&lt;&#x2F;code&gt; section&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;_ezero&lt;&#x2F;code&gt;: the end of the &lt;code&gt;.bss&lt;&#x2F;code&gt; section&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For our &lt;code&gt;.bss&lt;&#x2F;code&gt; section, we need to zero out all memory between &lt;code&gt;_szero&lt;&#x2F;code&gt; and
&lt;code&gt;_ezero&lt;&#x2F;code&gt;. For the &lt;code&gt;.data&lt;&#x2F;code&gt; section, we need to copy the memory from &lt;code&gt;_ldata&lt;&#x2F;code&gt;
into the memory from &lt;code&gt;_sdata&lt;&#x2F;code&gt; to &lt;code&gt;_edata&lt;&#x2F;code&gt;. Let&#x27;s do this in our &lt;code&gt;_start()&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;extern var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_szero&lt;&#x2F;span&gt;&lt;span&gt;: u32;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;extern var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ezero&lt;&#x2F;span&gt;&lt;span&gt;: u32;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;extern var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_sdata&lt;&#x2F;span&gt;&lt;span&gt;: u32;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;extern var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_edata&lt;&#x2F;span&gt;&lt;span&gt;: u32;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;extern var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ldata&lt;&#x2F;span&gt;&lt;span&gt;: u32;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;_start&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;szero&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrCast&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;_szero);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sdata&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrCast&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;_sdata);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ldata&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrCast&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;_ldata);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; bss_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _ezero &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; _szero;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(bss_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@memset&lt;&#x2F;span&gt;&lt;span&gt;(szero[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt; _ezero &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; _szero], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; data_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; _edata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; _sdata;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(data_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@memcpy&lt;&#x2F;span&gt;&lt;span&gt;(sdata[0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;data_len], ldata[0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;data_len]);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;asm volatile &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;nop&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And there you have it! We&#x27;ve reached main! That&#x27;s a lot of stuff happening
under the hood... Note that your startup code isn&#x27;t limited to initilizing
system memory. The possibilities are endless. One thing you might consider
putting in your startup code is system clock setup. But that&#x27;s outside the
scope of this project, for now at least.&lt;&#x2F;p&gt;
&lt;p&gt;References: &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#6&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;flashing&quot;&gt;Flashing&lt;&#x2F;h1&gt;
&lt;p&gt;As I mentioned earlier, I&#x27;m using OpenOCD to flash the MCU. I created a step in &lt;code&gt;build.zig&lt;&#x2F;code&gt; that would do this for me:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;std.Build) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; flash_run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;addSystemCommand&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;.{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;openocd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;-f&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;usr&#x2F;share&#x2F;openocd&#x2F;scripts&#x2F;board&#x2F;st_nucleo_f4.cfg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;-c&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;init&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;-c&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;reset halt; flash write_image erase zig-out&#x2F;bin&#x2F;stm32-test.bin 0x08000000 bin&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;-c&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;flash verify_image zig-out&#x2F;bin&#x2F;stm32-test.bin 0x08000000 bin&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;-c&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;reset run; shutdown&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; flash_step &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;flash&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Flash the code to the target&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    flash_run.step.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;dependOn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;install_bin.step);
&lt;&#x2F;span&gt;&lt;span&gt;    flash_step.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;dependOn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;flash_run.step);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; -- snip
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;@import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To flash the MCU, all I need to do is &lt;code&gt;zig build flash&lt;&#x2F;code&gt;. The artifacts are
rebuilt only when needed, and flashing is handled via the system command to
&lt;code&gt;openocd&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;blink-a-damn-led&quot;&gt;Blink a damn LED&lt;&#x2F;h1&gt;
&lt;p&gt;The NUCLEO-F401RE development board has an LED wired up to GPIO &lt;code&gt;PA5&lt;&#x2F;code&gt;. Before
anything else, the GPIO A clocks need to be enabled on the &lt;code&gt;AHB1&lt;&#x2F;code&gt; bus. We do
this by setting the &lt;code&gt;GPIOA EN&lt;&#x2F;code&gt; bit in the &lt;code&gt;RCC_AHB1ENR&lt;&#x2F;code&gt; register. After that&#x27;
we&#x27;re free to configure the GPIO pin as an output and toggle the &lt;code&gt;ODR&lt;&#x2F;code&gt; register
to turn the LED on and off.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rcc_ahb1enr&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;volatile u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4002_3830&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpio_a_mode&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;volatile u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4002_0000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpio_a_odr&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;volatile u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4002_0014&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    rcc_ahb1enr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* |= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    gpio_a_mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* |= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    gpio_a_odr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;asm volatile &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;nop&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        gpio_a_odr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* ^= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;hello-world&quot;&gt;Hello, world!&lt;&#x2F;h1&gt;
&lt;p&gt;Next, we need to enable the UART. On my board, USART2 (GPIO &lt;code&gt;PA2&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;PA3&lt;&#x2F;code&gt;) is
exposed over to the ST-Link. In rough steps, we need to do the following:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;enable &lt;code&gt;APB1&lt;&#x2F;code&gt; bus clocks for USART2&lt;&#x2F;li&gt;
&lt;li&gt;set GPIO mode to alternate function&lt;&#x2F;li&gt;
&lt;li&gt;configure alternate function to USART2&lt;&#x2F;li&gt;
&lt;li&gt;enable USART2&lt;&#x2F;li&gt;
&lt;li&gt;configure the baud rate&lt;&#x2F;li&gt;
&lt;li&gt;enable the transmitter&lt;&#x2F;li&gt;
&lt;li&gt;send data&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Here&#x27;s what I came up with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rcc_ahb1enr&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;volatile u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4002_3830&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rcc_apb1enr&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;volatile u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4002_3840&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpio_a_moder&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;volatile u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4002_0000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpio_a_odr&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;volatile u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4002_0014&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpio_a_aflr&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;volatile u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4002_0020&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;usart_2_sr&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;volatile u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4000_4400&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;usart_2_dr&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;volatile u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4000_4404&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;usart_2_brr&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;volatile u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4000_4408&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;usart_2_cr1&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;volatile u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;@ptrFromInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0x4000_440c&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    rcc_ahb1enr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* |= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    rcc_apb1enr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* |= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    gpio_a_moder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* |= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    gpio_a_odr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    gpio_a_moder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* |= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    gpio_a_aflr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* |= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    usart_2_cr1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* |= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    usart_2_brr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* |= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0xffff&lt;&#x2F;span&gt;&lt;span&gt; &amp;amp; ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    usart_2_cr1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* |= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; xmit_str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, world!\r\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; xmit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;xmit) {
&lt;&#x2F;span&gt;&lt;span&gt;            xmit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(xmit_str) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(usart_2_sr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.*&lt;&#x2F;span&gt;&lt;span&gt; &amp;amp; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;                usart_2_dr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* |=&lt;&#x2F;span&gt;&lt;span&gt; c;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;asm volatile &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;nop&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        gpio_a_odr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;.* ^= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Attaching to the serial port and flashing the code gives me what I want:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;Hello, world!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;If you couldn&#x27;t tell, I&#x27;m getting burned out writing this. This post has taken
me the better part of a day. Even though it&#x27;s somewhat laborious, I
accomplished my goal of getting &quot;Hello, World!&quot; printed to my terminal from an
embedded device without any dependencies within the time limit I imposed on
myself.&lt;&#x2F;p&gt;
&lt;p&gt;The code is not particularly readable, though. The register access is esoteric,
and there&#x27;s no documentation about what each value means. However, there are
some pretty elegant ways of solving that problem that I hope to share in a
follow-up post. However, that&#x27;s all for today.&lt;&#x2F;p&gt;
&lt;p&gt;Zig has quickly become my favorite language since I picked it up back in
February when it was in &lt;code&gt;0.11.0&lt;&#x2F;code&gt;. We&#x27;re now in &lt;code&gt;0.13.0&lt;&#x2F;code&gt;. So much has changed,
and the &lt;code&gt;0.14.0-dev&lt;&#x2F;code&gt; branch has seemingly more changes than ever. Since
&lt;code&gt;0.11.0&lt;&#x2F;code&gt;, the language, its standard library, and its build system have seem
massive improvements. If you&#x27;re looking to try out Zig, there&#x27;s no better time
than now!.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;I have a lot to say about the Zig build system. Stay tuned for that post!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sourceware.org&#x2F;binutils&#x2F;docs&#x2F;ld&#x2F;Basic-Script-Concepts.html&quot;&gt;Basic Linker Script Concepts&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.thea.codes&#x2F;the-most-thoroughly-commented-linker-script&#x2F;&quot;&gt;The most thoroughly commented linker script (probably)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;The STM32F401RE aliases address &lt;code&gt;0x0000_0000&lt;&#x2F;code&gt; to flash memory at
&lt;code&gt;0x0800_0000&lt;&#x2F;code&gt; up to 256KB. In other words, when we reference &lt;code&gt;0x0000_0000&lt;&#x2F;code&gt;,
the address is translated to &lt;code&gt;0x0800_0000&lt;&#x2F;code&gt;; when &lt;code&gt;0x0000_0004&lt;&#x2F;code&gt; is accessed,
the address is translated to &lt;code&gt;0x0800_0004&lt;&#x2F;code&gt;; and so on. This means that our
LMA for flash may be either of these values. This is relevant to understand
the &lt;a href=&quot;https:&#x2F;&#x2F;www.weskoerber.com&#x2F;posts&#x2F;blog&#x2F;stm32-zig-1&#x2F;#cortex-m4-startup&quot;&gt;Cortex-M4 startup&lt;&#x2F;a&gt; proccess.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.muppetlabs.com&#x2F;~breadbox&#x2F;software&#x2F;tiny&#x2F;teensy.html&quot;&gt;A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;6&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;dbp-consulting.com&#x2F;tutorials&#x2F;debugging&#x2F;linuxProgramStartup.html&quot;&gt;Linux x86 Program Start Up&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Hello, world</title>
        <published>2024-02-27T00:00:00+00:00</published>
        <updated>2024-02-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Wes Koerber
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.weskoerber.com/posts/blog/hello/"/>
        <id>https://www.weskoerber.com/posts/blog/hello/</id>
        
        <content type="html" xml:base="https://www.weskoerber.com/posts/blog/hello/">&lt;h1 id=&quot;a-brief-introduction&quot;&gt;A brief introduction&lt;&#x2F;h1&gt;
&lt;p&gt;When I launched this site about a year ago, I wanted an easy-to-use static site
generator that took Markdown source content and a theme that looked clean,
minimal, and had a dark theme toggle. At the time of writing this, you&#x27;re
looking at a static site generated with &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&quot;&gt;Zola&lt;&#x2F;a&gt; using
the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;not-matthias&#x2F;apollo&quot;&gt;apollo&lt;&#x2F;a&gt; theme. I&#x27;m really happy
with the way it turned out; however, I think the theme is doing most of the
legwork.&lt;&#x2F;p&gt;
&lt;p&gt;The theme template contained a blog that I never bothered removing. I wasn&#x27;t
motivated enough to remove it but I wasn&#x27;t motivated enough to write anything
either. That is, until I wrote a detailed description of a bug in a
several-decade-old application I maintain at my job. The review documented the
problem, its effect, and possible solutions. It was extremely boring, but it
needed to be done. After it was all said and done, the fix was actually quite
simple: make sure a file exists before performing some business logic.&lt;&#x2F;p&gt;
&lt;p&gt;After my coworker read my diatribe, he complimented my writing and said I could
write technical blogs. Every once in a while, an idea pops into my head and I
think to myself, &quot;This would be a good topic for a blog post&quot;. However, as
quickly as the excitement of fleshing out a new idea arises, it just as quickly
dissipates and is replaced with the dread of imposter syndrome. His words - as
trivial as they might have sounded - gave me the confidence and motivation to
start writing.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t want to promise too much, but I would like to jot things down here at
least somewhat regularly. I plan on writing about things that interest me,
mostly technical in nature, but I also reserve the right to change it up
whenever I feel like it. Also, I don&#x27;t intend on any of my posts to be
educational. They are purely for my own enjoyment and personal gratification.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
